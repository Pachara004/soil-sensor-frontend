import {
  Component,
  OnInit,
  ViewChild,
  ElementRef,
  AfterViewInit,
  OnDestroy,
  HostListener,
} from '@angular/core';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { CommonModule } from '@angular/common';
import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';
import { Map, Marker, config, LngLatBounds, Popup } from '@maptiler/sdk';
import '@maptiler/sdk/dist/maptiler-sdk.css';
import { environment } from '../../../service/environment';
import { Constants } from '../../../config/constants';
import { NotificationService } from '../../../service/notification.service';
import { Auth, onAuthStateChanged } from '@angular/fire/auth';
import { lastValueFrom } from 'rxjs';
interface Measurement {
  id: string;
  location: string;
  date: string;
  temperature?: number;
  moisture?: number;
  nitrogen?: number;
  phosphorus?: number;
  potassium?: number;
  ph?: number;
  areasid?: string;
  measurementPoint?: number;
  lat?: number;
  lng?: number;
  [key: string]: any;
}
interface AreaGroup {
  areasid: string;
  areaName: string;
  measurements: Measurement[];
  totalMeasurements: number;
  averages: {
    temperature: number;
    moisture: number;
    nitrogen: number;
    phosphorus: number;
    potassium: number;
    ph: number;
  };
  lastMeasurementDate: string;
  polygonBounds?: [number, number][];
}
interface UserData {
  username: string;
  userID: string;
  name: string;
  email: string;
  phone: string;
  devices?: { [key: string]: boolean };
}
interface FertilizerRecommendation {
  formula: string;
  brand: string;
  amount: string;
  description: string;
  application: string;
  timing: string;
  price: string;
  availability: string;
}
@Component({
  selector: 'app-history',
  standalone: true,
  imports: [FormsModule, CommonModule, MatProgressSpinnerModule],
  templateUrl: './history.component.html',
  styleUrl: './history.component.scss',
})
export class HistoryComponent implements OnInit, AfterViewInit, OnDestroy {
  username: string = '';
  userName: string = '';
  userEmail: string = '';
  deviceId: string | null = null;
  devices: string[] = [];
  deviceMap: { [key: string]: string } = {}; // Map device_name to device_id
  userData: any = null;
  deviceData: any = null;
  areas: AreaGroup[] = [];
  areaGroups: AreaGroup[] = [];
  selectedArea: AreaGroup | null = null;
  showAreaDetails = false;
  isLoading = true;
  showCardMenu = false;
  map: Map | undefined;
  markers: any[] = [];
  currentUser: any = null;
  @ViewChild('mapContainer') mapContainer!: ElementRef<HTMLElement>;
  private apiUrl: string;
  constructor(
    private router: Router,
    private location: Location,
    private http: HttpClient,
    private constants: Constants,
    private notificationService: NotificationService,
    private auth: Auth
  ) {
    this.apiUrl = this.constants.API_ENDPOINT;
    config.apiKey = environment.mapTilerApiKey;
  }
  ngOnInit(): void {
    // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á refresh - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡∏Å‡πà‡∏≠‡∏ô
    const cachedData = localStorage.getItem('history-cache');
    if (cachedData) {
      try {
        const parsedData = JSON.parse(cachedData);
        console.log('üì¶ Loading cached data:', parsedData);
        
        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache expiration (5 ‡∏ô‡∏≤‡∏ó‡∏µ)
        const cacheAge = Date.now() - (parsedData.timestamp || 0);
        const cacheExpired = cacheAge > 5 * 60 * 1000; // 5 minutes
        
        if (!cacheExpired) {
          if (parsedData.username) this.username = parsedData.username;
          if (parsedData.userName) this.userName = parsedData.userName;
          if (parsedData.userEmail) this.userEmail = parsedData.userEmail;
          if (parsedData.devices) this.devices = parsedData.devices;
          if (parsedData.deviceId) this.deviceId = parsedData.deviceId;
          if (parsedData.deviceMap) this.deviceMap = parsedData.deviceMap;
          if (parsedData.areaGroups) this.areaGroups = parsedData.areaGroups;
          if (parsedData.areas) this.areas = parsedData.areas;
          
          console.log('üì¶ Cached data loaded successfully');
          console.log('üì¶ Username from cache:', this.username);
          console.log('üì¶ Devices from cache:', this.devices);
          console.log('üì¶ Device ID from cache:', this.deviceId);
          console.log('üì¶ Cache age:', Math.round(cacheAge / 1000), 'seconds');
        } else {
          console.log('üì¶ Cache expired, will reload data');
          localStorage.removeItem('history-cache');
        }
      } catch (error) {
        console.error('‚ùå Error loading cached data:', error);
        localStorage.removeItem('history-cache');
      }
    }
    
    // ‡πÉ‡∏ä‡πâ Firebase Auth ‡πÅ‡∏ó‡∏ô localStorage
    onAuthStateChanged(this.auth, (user) => {
      if (user) {
        this.currentUser = user;
        // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠ user - ‡πÉ‡∏ä‡πâ displayName ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ email
        this.username = user.displayName || user.email?.split('@')[0] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        this.userName = user.displayName || user.email?.split('@')[0] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        this.userEmail = user.email || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        
        console.log('üë§ User info from Firebase:', {
          displayName: user.displayName,
          email: user.email,
          username: this.username,
          userName: this.userName,
          userEmail: this.userEmail
        });
        
        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÅ‡∏•‡∏∞ device ‡∏à‡∏≤‡∏Å backend with debounce
        setTimeout(() => this.loadUserAndDeviceData(), 50);
      } else {
        this.router.navigate(['/login']);
      }
    });
  }
  ngAfterViewInit() {
    this.initializeMap();
  }
  ngOnDestroy() {
    if (this.map) {
      this.map.remove();
    }
  }
  async onDeviceChange() {
    console.log('üîÑ Device changed to:', this.deviceId);
    console.log('üîÑ Device map:', this.deviceMap);
    
    if (this.deviceId) {
      // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏Ñ‡πà areas ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏∏‡∏î‡∏´‡∏•‡∏±‡∏Å‡πÜ ‡∏ï‡∏≤‡∏° device ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      console.log('üîÑ Loading areas for device:', this.deviceId);
      await this.loadAreas();
    }
  }
  async loadUserAndDeviceData() {
    if (!this.currentUser) return;
    
    // Check cache first for better performance
    const cacheKey = `user_data_${this.userEmail}`;
    const cachedData = localStorage.getItem(cacheKey);
    if (cachedData) {
      try {
        const data = JSON.parse(cachedData);
        if (Date.now() - data.timestamp < 300000) { // 5 minutes cache
          this.userData = data.userData;
          this.deviceData = data.deviceData;
          this.loadAreas();
          return;
        }
      } catch (e) {
        // Cache invalid, continue with API call
      }
    }
    
    try {
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÅ‡∏•‡∏∞ device ‡∏à‡∏≤‡∏Å backend
      const token = await this.currentUser.getIdToken();
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏à‡∏≤‡∏Å PostgreSQL
      let userDataFound = false;
      const userEndpoints = [
        '/api/auth/me',
        '/api/user/profile',
        '/api/user/me',
        '/api/profile'
      ];
      for (const endpoint of userEndpoints) {
      try {
        const userResponse = await lastValueFrom(
            this.http.get<any>(`${this.apiUrl}${endpoint}`, {
            headers: { 'Authorization': `Bearer ${token}` }
          })
        );
          let userData = userResponse;
          if (userResponse.user) {
            userData = userResponse.user;
          }
          if (userData && (userData.user_name || userData.username)) {
            // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á user_name ‡∏à‡∏≤‡∏Å PostgreSQL - ‡πÉ‡∏ä‡πâ user_name ‡∏à‡∏≤‡∏Å DB ‡∏Å‡πà‡∏≠‡∏ô
            this.username = userData.user_name || userData.username || this.username;
            this.userName = userData.user_name || userData.username || this.userName;
            this.userEmail = userData.user_email || userData.email || this.userEmail;
            this.userData = userData;
            userDataFound = true;
            
            console.log('üë§ User data from PostgreSQL:', userData);
            console.log('üë§ PostgreSQL user_name:', userData.user_name);
            console.log('üë§ Username set to:', this.username);
            console.log('üë§ UserName set to:', this.userName);
            console.log('üë§ UserEmail set to:', this.userEmail);
            break; // ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠ endpoint ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
          }
        } catch (userError: any) {
          // User endpoint failed
          continue; // ‡∏•‡∏≠‡∏á endpoint ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        }
      }
      if (!userDataFound) {
        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å backend ‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase
        // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠ user - ‡πÉ‡∏ä‡πâ displayName ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ email
        this.username = this.currentUser.displayName || this.currentUser.email?.split('@')[0] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        this.userName = this.currentUser.displayName || this.currentUser.email?.split('@')[0] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        this.userEmail = this.currentUser.email || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        
        console.log('üë§ User info from Firebase:', {
          displayName: this.currentUser.displayName,
          email: this.currentUser.email,
          username: this.username,
          userName: this.userName,
          userEmail: this.userEmail
        });
      }
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• device
      try {
        console.log('üîç Loading devices from API...');
        const devicesResponse = await lastValueFrom(
          this.http.get<any[]>(`${this.apiUrl}/api/devices`, {
            headers: { 'Authorization': `Bearer ${token}` }
          })
        );
        console.log('üì± Devices response:', devicesResponse);
        
        if (devicesResponse && devicesResponse.length > 0) {
          // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå - ‡πÉ‡∏ä‡πâ device_name ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ deviceid
          this.devices = devicesResponse.map(device => {
            const deviceName = device.device_name || device.deviceid || `Device ${device.deviceid}`;
            console.log('üì± Device mapping:', { deviceid: device.deviceid, device_name: device.device_name, finalName: deviceName });
            return deviceName;
          });
          console.log('üì± Devices list:', this.devices);
          
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á device_name ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô device_id
          this.deviceMap = {};
          devicesResponse.forEach(device => {
            const deviceName = device.device_name || device.deviceid || `Device ${device.deviceid}`;
            this.deviceMap[deviceName] = device.deviceid;
          });
          console.log('üì± Device map:', this.deviceMap);
          
          this.deviceId = this.devices[0] || null;
          console.log('üì± Selected device ID:', this.deviceId);
          console.log('üì± Selected device name:', this.deviceId);
          
          // ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
          console.log('üîç Device display check:');
          console.log('üîç Devices array length:', this.devices.length);
          console.log('üîç First device:', this.devices[0]);
          console.log('üîç Device ID:', this.deviceId);
        } else {
          console.log('‚ö†Ô∏è No devices found');
          // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
          this.devices = ['‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå'];
          this.deviceId = null;
        }
      } catch (deviceError) {
        console.error('‚ùå Error loading devices:', deviceError);
      }
      // ‚úÖ Cache the data for better performance - ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const cacheData = {
        username: this.username,
        userName: this.userName,
        userEmail: this.userEmail,
        devices: this.devices,
        deviceId: this.deviceId,
        deviceMap: this.deviceMap,
        userData: this.userData,
        deviceData: this.deviceData,
        timestamp: Date.now()
      };
      
      localStorage.setItem('history-cache', JSON.stringify(cacheData));
      console.log('üíæ Data cached successfully:', cacheData);
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• areas ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏î‡πâ token ‡πÅ‡∏•‡πâ‡∏ß
      await this.loadAreas();
      // ‚úÖ ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏î‡∏∂‡∏á measurements ‡∏ó‡∏µ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ areas API ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    } catch (error) {
      console.error('‚ùå Error loading user and device data:', error);
    }
  }
  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• measurements ‡∏à‡∏≤‡∏Å database ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  private async loadMeasurementsFromDatabase(): Promise<any[]> {
    if (!this.currentUser) {
      console.log('‚ö†Ô∏è No current user for loading measurements');
      return [];
    }

    try {
      const token = await this.currentUser.getIdToken();
      console.log('üîç Loading measurements from database...');
      
      // ‚úÖ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ endpoint ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
      const endpoints = [
        '/api/firebase-measurements',
        '/api/measurements',
        '/api/measurements/all',
        '/api/measurement-data',
        '/api/measurement-records',
        '/api/firebase-measurements/all',
        '/api/firebase-measurements/list'
      ];
      
      for (const endpoint of endpoints) {
        try {
          console.log(`üîç Trying endpoint: ${endpoint}`);
          const response = await lastValueFrom(
            this.http.get<any[]>(`${this.apiUrl}${endpoint}`, {
              headers: { 'Authorization': `Bearer ${token}` }
            })
          );
          
          if (response && Array.isArray(response)) {
            console.log(`‚úÖ Successfully loaded measurements from ${endpoint}:`, response.length);
            console.log('üìä Sample measurement data:', response[0]);
            
            // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á measurements ‡∏ï‡∏≤‡∏° device ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            if (this.deviceId) {
              const actualDeviceId = this.deviceMap[this.deviceId] || this.deviceId;
              console.log('üîç Filtering measurements by device:', actualDeviceId);
              console.log('üîç Device map:', this.deviceMap);
              console.log('üîç Selected device ID:', this.deviceId);
              console.log('üîç All measurements before filtering:', response);
              
              const filteredMeasurements = response.filter(measurement => {
                const measurementDeviceId = measurement['deviceid'] || measurement['device_id'];
                const match = measurementDeviceId && measurementDeviceId.toString() === actualDeviceId.toString();
                console.log(`üîç Measurement device: ${measurementDeviceId}, Match: ${match}`);
                return match;
              });
              
              console.log(`üìä Filtered measurements: ${filteredMeasurements.length} out of ${response.length}`);
              return filteredMeasurements;
            } else {
              console.log('‚ö†Ô∏è No device selected, returning all measurements');
              console.log('üîç All measurements:', response);
            }
            
            return response;
          }
        } catch (error: any) {
          console.log(`‚ùå Endpoint ${endpoint} failed:`, error.status, error.message);
        }
      }
      
      console.log('‚ö†Ô∏è All measurement endpoints failed');
      return [];
      
    } catch (error) {
      console.error('‚ùå Error loading measurements from database:', error);
      return [];
    }
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• measurements ‡∏à‡∏≤‡∏Å PostgreSQL ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ API endpoints ‡πÉ‡∏´‡∏°‡πà
  private async loadMeasurementsFromPostgreSQLAPI(areasid?: string): Promise<any[]> {
    if (!this.currentUser) {
      console.log('‚ö†Ô∏è No current user for loading measurements');
      return [];
    }

    try {
      const token = await this.currentUser.getIdToken();
      console.log('üîç Loading measurements from PostgreSQL API...');
      console.log('üîç Areasid filter:', areasid);
      
      let apiUrl: string;
      
      if (areasid) {
        // ‚úÖ ‡πÉ‡∏ä‡πâ API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏â‡∏û‡∏≤‡∏∞
        const deviceId = this.deviceId ? (this.deviceMap[this.deviceId] || this.deviceId) : '';
        apiUrl = `${this.apiUrl}/api/areas/${areasid}/measurements?deviceid=${deviceId}`;
        console.log('üîç Using area-specific API:', apiUrl);
        console.log('üîç Device ID for area-specific API:', deviceId);
      } else {
        // ‚úÖ ‡πÉ‡∏ä‡πâ API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const deviceId = this.deviceId ? (this.deviceMap[this.deviceId] || this.deviceId) : '';
        apiUrl = `${this.apiUrl}/api/areas/measurements/all?deviceid=${deviceId}`;
        console.log('üîç Using all measurements API:', apiUrl);
        console.log('üîç Device ID for all measurements API:', deviceId);
      }
      
      const response = await lastValueFrom(
        this.http.get<any[]>(apiUrl, {
          headers: { 'Authorization': `Bearer ${token}` }
        })
      );
      
      if (response && Array.isArray(response)) {
        console.log(`‚úÖ Successfully loaded measurements from PostgreSQL API:`, response.length);
        console.log('üìä Sample measurement data:', response[0]);
        
        // ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• measurements
        response.forEach((measurement, index) => {
          console.log(`üìä PostgreSQL API Measurement ${index + 1}:`, {
            measurementid: measurement['measurementid'],
            areasid: measurement['areasid'],
            point_id: measurement['point_id'],
            lat: measurement['lat'],
            lng: measurement['lng'],
            deviceid: measurement['deviceid'],
            device_name: measurement['device_name'],
            area_name: measurement['area_name'],
            temperature: measurement['temperature'],
            moisture: measurement['moisture'],
            ph: measurement['ph'],
            nitrogen: measurement['nitrogen'],
            phosphorus: measurement['phosphorus'],
            potassium: measurement['potassium'],
            measurement_date: measurement['measurement_date'],
            measurement_time: measurement['measurement_time']
          });
        });
        
        return response;
      }
      
      console.log('‚ö†Ô∏è No measurements found in PostgreSQL API');
      return [];
      
    } catch (error) {
      console.error('‚ùå Error loading measurements from PostgreSQL API:', error);
      return [];
    }
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• measurements ‡∏à‡∏≤‡∏Å PostgreSQL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á‡∏ú‡πà‡∏≤‡∏ô SQL query
  private async loadMeasurementsFromPostgreSQLDirect(areasid?: string): Promise<any[]> {
    if (!this.currentUser) {
      console.log('‚ö†Ô∏è No current user for loading measurements');
      return [];
    }

    try {
      const token = await this.currentUser.getIdToken();
      console.log('üîç Loading measurements from PostgreSQL directly...');
      console.log('üîç Areasid filter:', areasid);
      
      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á SQL query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å measurement table
      let sqlQuery = `
        SELECT 
          measurementid,
          deviceid,
          areasid,
          point_id,
          lat,
          lng,
          temperature,
          moisture,
          nitrogen,
          phosphorus,
          potassium,
          ph,
          measurement_date,
          measurement_time,
          created_at,
          updated_at
        FROM measurement
        WHERE 1=1
      `;
      
      const params: any[] = [];
      let paramIndex = 1;
      
      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç areasid ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (areasid) {
        sqlQuery += ` AND areasid = $${paramIndex}`;
        params.push(parseInt(areasid));
        paramIndex++;
      }
      
      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç deviceid ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (this.deviceId) {
        const actualDeviceId = this.deviceMap[this.deviceId] || this.deviceId;
        sqlQuery += ` AND deviceid = $${paramIndex}`;
        params.push(parseInt(actualDeviceId));
        paramIndex++;
      }
      
      sqlQuery += ` ORDER BY measurementid DESC`;
      
      console.log('üîç SQL Query:', sqlQuery);
      console.log('üîç SQL Params:', params);
      
      // ‚úÖ ‡∏™‡πà‡∏á SQL query ‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend
      const response = await lastValueFrom(
        this.http.post<any[]>(`${this.apiUrl}/api/query`, {
          query: sqlQuery,
          params: params
        }, {
          headers: { 'Authorization': `Bearer ${token}` }
        })
      );
      
      if (response && Array.isArray(response)) {
        console.log(`‚úÖ Successfully loaded measurements from PostgreSQL:`, response.length);
        console.log('üìä Sample measurement data:', response[0]);
        
        // ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• measurements
        response.forEach((measurement, index) => {
          console.log(`üìä PostgreSQL Measurement ${index + 1}:`, {
            measurementid: measurement['measurementid'],
            areasid: measurement['areasid'],
            point_id: measurement['point_id'],
            lat: measurement['lat'],
            lng: measurement['lng'],
            deviceid: measurement['deviceid'],
            temperature: measurement['temperature'],
            moisture: measurement['moisture'],
            ph: measurement['ph'],
            nitrogen: measurement['nitrogen'],
            phosphorus: measurement['phosphorus'],
            potassium: measurement['potassium'],
            measurement_date: measurement['measurement_date'],
            measurement_time: measurement['measurement_time']
          });
        });
        
        return response;
      }
      
      console.log('‚ö†Ô∏è No measurements found in PostgreSQL');
      return [];
      
    } catch (error) {
      console.error('‚ùå Error loading measurements from PostgreSQL:', error);
      return [];
    }
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• measurements ‡∏à‡∏≤‡∏Å PostgreSQL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
  private async loadMeasurementsFromPostgreSQL(areasid?: string): Promise<any[]> {
    if (!this.currentUser) {
      console.log('‚ö†Ô∏è No current user for loading measurements');
      return [];
    }

    try {
      const token = await this.currentUser.getIdToken();
      console.log('üîç Loading measurements from PostgreSQL...');
      console.log('üîç Areasid filter:', areasid);
      
      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å PostgreSQL
      let apiUrl = `${this.apiUrl}/api/firebase-measurements`;
      
      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° query parameters
      const params = new URLSearchParams();
      if (areasid) {
        params.append('areasid', areasid);
      }
      if (this.deviceId) {
        const actualDeviceId = this.deviceMap[this.deviceId] || this.deviceId;
        params.append('deviceid', actualDeviceId);
      }
      
      if (params.toString()) {
        apiUrl += `?${params.toString()}`;
      }
      
      console.log('üîç Firebase Measurements API URL:', apiUrl);
      
      const response = await lastValueFrom(
        this.http.get<any[]>(apiUrl, {
          headers: { 'Authorization': `Bearer ${token}` }
        })
      );
      
      if (response && Array.isArray(response)) {
        console.log(`‚úÖ Successfully loaded measurements from PostgreSQL:`, response.length);
        console.log('üìä Sample measurement data:', response[0]);
        
        // ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• measurements
        response.forEach((measurement, index) => {
          console.log(`üìä PostgreSQL Measurement ${index + 1}:`, {
            measurementid: measurement['measurementid'],
            id: measurement['id'],
            measurement_id: measurement['measurement_id'],
            areasid: measurement['areasid'],
            point_id: measurement['point_id'],
            lat: measurement['lat'],
            lng: measurement['lng'],
            deviceid: measurement['deviceid'],
            temperature: measurement['temperature'],
            moisture: measurement['moisture'],
            ph: measurement['ph'],
            nitrogen: measurement['nitrogen'],
            phosphorus: measurement['phosphorus'],
            potassium: measurement['potassium'],
            measurement_date: measurement['measurement_date'],
            measurement_time: measurement['measurement_time']
          });
        });
        
        return response;
      }
      
      console.log('‚ö†Ô∏è No measurements found in PostgreSQL');
      return [];
      
    } catch (error) {
      console.error('‚ùå Error loading measurements from PostgreSQL:', error);
      return [];
    }
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• measurements ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö areasid ‡πÄ‡∏â‡∏û‡∏≤‡∏∞
  private async loadMeasurementsForArea(areasid: string): Promise<any[]> {
    console.log(`üîç Loading measurements for areasid: ${areasid}`);
    
    // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å PostgreSQL ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ API endpoints ‡πÉ‡∏´‡∏°‡πà
    const measurements = await this.loadMeasurementsFromPostgreSQLAPI(areasid);
    
    console.log(`üìä Area ${areasid} measurements loaded:`, measurements.length);
    console.log(`üìä Area ${areasid} measurement details:`, measurements.map(m => ({
      measurementid: m['measurementid'] || m.measurementid,
      areasid: m['areasid'] || m.areasid,
      point_id: m['point_id'] || m.point_id,
      lat: m['lat'] || m.lat,
      lng: m['lng'] || m.lng,
      deviceid: m['deviceid'] || m.deviceid
    })));
    
    return measurements;
  }

  async loadAreas() {
    if (!this.currentUser) {
      return;
    }
    
    // Check cache for areas data
    const areasCacheKey = `areas_data_${this.userEmail}`;
    const cachedAreas = localStorage.getItem(areasCacheKey);
    if (cachedAreas) {
      try {
        const data = JSON.parse(cachedAreas);
        if (Date.now() - data.timestamp < 600000) { // 10 minutes cache
          this.areas = data.areas;
          this.areaGroups = data.areaGroups;
          this.isLoading = false;
          return;
        }
      } catch (e) {
        // Cache invalid, continue with API call
      }
    }
    
    this.isLoading = true;
    try {
      const token = await this.currentUser.getIdToken();
      
      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• areas ‡∏Å‡πà‡∏≠‡∏ô - ‡πÉ‡∏ä‡πâ endpoint ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
      let areasApiUrl = `${this.apiUrl}/api/areas`;
      if (this.deviceId) {
        const actualDeviceId = this.deviceMap[this.deviceId] || this.deviceId;
        areasApiUrl += `?deviceid=${actualDeviceId}`;
      }
      
      console.log('üîç Areas API URL:', areasApiUrl);
      console.log('üîç Device ID:', this.deviceId);
      console.log('üîç Actual Device ID:', this.deviceId ? (this.deviceMap[this.deviceId] || this.deviceId) : 'No device selected');
      
      const areasResponse = await lastValueFrom(
        this.http.get<any[]>(areasApiUrl, {
          headers: { 'Authorization': `Bearer ${token}` }
        })
      );

      if (areasResponse && Array.isArray(areasResponse)) {
        console.log('üìä Areas loaded from API:', areasResponse.length);
        console.log('üìä Areas data:', areasResponse);
        
        // ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö areasid ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô areas
        const uniqueAreasIds = [...new Set(areasResponse.map(area => area.areasid || area.id).filter(id => id != null))];
        console.log('üìä Unique areasids in areas:', uniqueAreasIds);
        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• measurements ‡∏à‡∏≤‡∏Å PostgreSQL ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ API endpoints ‡πÉ‡∏´‡∏°‡πà
        console.log('üîç Loading measurements from PostgreSQL API...');
        console.log('üîç Device ID for measurements:', this.deviceId);
        console.log('üîç Device Map for measurements:', this.deviceMap);
        
        const measurementsResponse = await this.loadMeasurementsFromPostgreSQLAPI();
        console.log('üìä Measurements loaded:', measurementsResponse.length);
        console.log('üìä Measurements data:', measurementsResponse);
        
        console.log('üìä Measurements loaded from API:', measurementsResponse.length);
        console.log('üìä Measurements data:', measurementsResponse);
        
        // ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î measurements ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏•‡∏î log ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥)
        console.log('üîç All measurements before filtering:', measurementsResponse.length);
        
        // ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö areasid ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÉ‡∏ô measurements
        const allMeasurementAreasids = measurementsResponse.map(m => m['areasid'] || m.areasid).filter(id => id != null);
        const allAreaAreasids = areasResponse.map(area => area.areasid || area.id).filter(id => id != null);
        const commonAreasids = [...new Set(allMeasurementAreasids)].filter(id => 
          [...new Set(allAreaAreasids)].includes(id)
        );
        console.log('üîç Common areasids:', commonAreasids);
        
        // ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö measurement IDs ‡πÅ‡∏•‡∏∞ areasid
        console.log('üìä Looking for areasids:', uniqueAreasIds);
        
        // ‚úÖ ‡∏Å‡∏£‡∏≠‡∏á measurements ‡∏ï‡∏≤‡∏° areasid ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (‡∏•‡∏î log ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥)
        const filteredMeasurements = measurementsResponse.filter(measurement => {
          const measurementAreasid = measurement['areasid']?.toString();
          const match = uniqueAreasIds.includes(measurementAreasid);
          return match;
        });
        
        console.log(`üìä Filtered measurements: ${filteredMeasurements.length} out of ${measurementsResponse.length}`);
        
        // ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ measurements
        if (filteredMeasurements.length === 0) {
          console.log('‚ö†Ô∏è No measurements found after filtering');
          console.log('‚ö†Ô∏è Available measurements areasids:', measurementsResponse.map(m => m['areasid']));
          console.log('‚ö†Ô∏è Looking for areasids:', uniqueAreasIds);
        }
        
        // ‚úÖ ‡∏•‡∏î log ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥ - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        if (measurementsResponse.length > 0) {
          console.log('üìä Sample measurement:', {
            measurementid: measurementsResponse[0]['measurementid'],
            areasid: measurementsResponse[0]['areasid'],
            point_id: measurementsResponse[0]['point_id'],
            deviceid: measurementsResponse[0]['deviceid']
          });
        }
        
        // ‚úÖ ‡∏•‡∏î log ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥ - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        const uniqueMeasurementsAreasIds = [...new Set(measurementsResponse.map(m => m.areasid).filter(id => id != null))];
        console.log('üìä Unique areasids in measurements:', uniqueMeasurementsAreasIds);
        
        // ‚úÖ ‡∏•‡∏î log ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥ - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        const areasAreasIds = [...new Set(areasResponse.map(area => area.areasid || area.id).filter(id => id != null))];
        const measurementsAreasIds = [...new Set(measurementsResponse.map(m => m.areasid).filter(id => id != null))];
        console.log('üìä Areas vs Measurements areasids:', { areas: areasAreasIds, measurements: measurementsAreasIds });
        console.log('üìä Missing areasids in measurements:', areasAreasIds.filter(id => !measurementsAreasIds.includes(id)));
        
        // ‚úÖ ‡∏•‡∏î log ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥ - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        const measurementsWithCoords = measurementsResponse.filter(m => m.lat && m.lng);
        console.log('üìä Measurements with coordinates:', measurementsWithCoords.length);
        
        // ‚úÖ ‡∏•‡∏î log ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥ - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        const measurementsWithValidCoords = measurementsResponse.filter(m => {
          const lat = parseFloat(String(m.lat || '0'));
          const lng = parseFloat(String(m.lng || '0'));
          return !isNaN(lat) && !isNaN(lng) && lat !== 0 && lng !== 0;
        });
        console.log('üìä Valid measurements with coordinates:', measurementsWithValidCoords.length);

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Areas API ‡πÄ‡∏õ‡πá‡∏ô format ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        const areaGroups: AreaGroup[] = await Promise.all(areasResponse.map(async area => {
          const areasid = area.areasid?.toString() || area.id?.toString() || '';
          console.log(`üîç Processing area ${areasid}:`, area);
          
        // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î measurements - ‡πÉ‡∏ä‡πâ filtered measurements ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        let areaMeasurements = filteredMeasurements.filter(measurement => {
          const measurementAreasid = measurement['areasid']?.toString();
          const match = measurementAreasid === areasid;
          console.log(`üîç Area ${areasid} measurement areasid: ${measurementAreasid}, Match: ${match}`);
          console.log(`üîç Area ${areasid} measurement details:`, measurement);
          return match;
        });
        
        // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ measurements ‡πÉ‡∏ô filteredMeasurements ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å API
        if (areaMeasurements.length === 0) {
          console.log(`‚ö†Ô∏è No measurements in filteredMeasurements for area ${areasid}, trying to load from API...`);
          try {
            const apiMeasurements = await this.loadMeasurementsForArea(areasid);
            console.log(`üìä API measurements for area ${areasid}:`, apiMeasurements.length);
            if (apiMeasurements.length > 0) {
              areaMeasurements = apiMeasurements;
              console.log(`‚úÖ Successfully loaded ${apiMeasurements.length} measurements from API for area ${areasid}`);
            }
          } catch (error) {
            console.error(`‚ùå Error loading measurements from API for area ${areasid}:`, error);
          }
        }
          
          console.log(`üìä Area ${areasid} measurements loaded:`, areaMeasurements.length);
          
          // ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡πÑ‡∏°‡πà‡∏°‡∏µ measurements ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö area ‡∏ô‡∏µ‡πâ
          if (areaMeasurements.length === 0) {
            console.log(`‚ö†Ô∏è No measurements found for area ${areasid}`);
          }
          
          // ‚úÖ ‡∏•‡∏î log ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥ - ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
          const areaMeasurementsWithCoords = areaMeasurements.filter(m => m.lat && m.lng);
          const areaMeasurementsWithValidCoords = areaMeasurements.filter(m => {
            const lat = parseFloat(String(m.lat || '0'));
            const lng = parseFloat(String(m.lng || '0'));
            return !isNaN(lat) && !isNaN(lng) && lat !== 0 && lng !== 0;
          });
          console.log(`üìä Area ${areasid} valid coordinates:`, areaMeasurementsWithValidCoords.length);

          // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å polygon bounds
          const areaSize = this.calculateAreaFromBounds(area.polygon_bounds || []);
          const areaSizeFormatted = this.formatAreaToThaiUnits(areaSize);
          
          // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å backend ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
          const averages = {
            temperature: parseFloat(area.temperature_avg) || 0,
            moisture: parseFloat(area.moisture_avg) || 0,
            nitrogen: parseFloat(area.nitrogen_avg) || 0,
            phosphorus: parseFloat(area.phosphorus_avg) || 0,
            potassium: parseFloat(area.potassium_avg) || 0,
            ph: parseFloat(area.ph_avg) || 0
          };
          
          // Area backend data processed
          
          const areaGroup = {
            areasid: areasid,
            areaName: area.area_name || area.name || area.location || `‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ${areasid}`,
            measurements: areaMeasurements,
            totalMeasurements: areaMeasurements.length,
            averages: averages,
            lastMeasurementDate: areaMeasurements.length > 0 
              ? areaMeasurements[0].createdAt || areaMeasurements[0].date || area.created_at || ''
              : area.created_at || ''
          };
          
          console.log(`‚úÖ Created area group for ${areasid}:`, areaGroup);
          console.log(`‚úÖ Area group measurements:`, areaGroup.measurements);
          console.log(`‚úÖ Area group measurement IDs:`, areaGroup.measurements.map(m => m['measurementid'] || m['id'] || m['measurement_id']));
          
          // ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö measurementid ‡πÉ‡∏ô area group
          areaGroup.measurements.forEach((measurement, index) => {
            console.log(`‚úÖ Area Group ${areasid} Measurement ${index + 1}:`, {
              measurementid: measurement.measurementid,
              id: measurement.id,
              measurement_id: measurement.measurement_id,
              areasid: measurement.areasid,
              point_id: measurement.point_id,
              lat: measurement.lat,
              lng: measurement.lng
            });
          });
          
          return areaGroup;
        }));
        
        this.areas = areaGroups;
        this.areaGroups = areaGroups;
        
        console.log('üéØ Final areaGroups:', areaGroups);
        console.log('üéØ AreaGroups length:', areaGroups.length);
        console.log('üéØ AreaGroups details:', areaGroups.map(ag => ({
          areasid: ag.areasid,
          areaName: ag.areaName,
          measurementsCount: ag.measurements.length,
          measurementIds: ag.measurements.map(m => m['measurementid'] || m['id'] || m['measurement_id'])
        })));
        
        // ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
        console.log('üåê Frontend Display Check:');
        console.log('üåê areaGroups.length:', areaGroups.length);
        console.log('üåê areaGroups[0]?.measurements?.length:', areaGroups[0]?.measurements?.length);
        console.log('üåê areaGroups[0]?.measurements:', areaGroups[0]?.measurements);
        console.log('üåê Device ID for display:', this.deviceId);
        console.log('üåê Device Map for display:', this.deviceMap);
        console.log('üåê Username for display:', this.username);
        console.log('üåê UserName for display:', this.userName);
        console.log('üåê UserEmail for display:', this.userEmail);
        
        this.areas = areaGroups;
        this.areaGroups = areaGroups;
        
        // ‚úÖ Cache the areas data for better performance - ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        const cacheData = {
          username: this.username,
          userName: this.userName,
          userEmail: this.userEmail,
          devices: this.devices,
          deviceId: this.deviceId,
          deviceMap: this.deviceMap,
          areas: areaGroups,
          areaGroups: areaGroups,
          timestamp: Date.now()
        };
        
        localStorage.setItem('history-cache', JSON.stringify(cacheData));
        console.log('üíæ Areas data cached successfully:', cacheData);
        
      this.isLoading = false;
      
        // Areas with measurements loaded
        
        if (areaGroups.length === 0) {
        this.notificationService.showNotification(
          'info',
          '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
          '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
        );
      }
      } else {
        this.areas = [];
        this.areaGroups = [];
        this.isLoading = false;
        this.notificationService.showNotification(
          'info',
          '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
          '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
        );
      }
    } catch (error: any) {
      console.error('‚ùå Error loading areas:', error);
      this.isLoading = false;
      
      if (error.status === 401) {
        this.notificationService.showNotification(
          'error',
          '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
          '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà'
        );
        this.router.navigate(['/login']);
      } else if (error.status === 404) {
        // ‚úÖ ‡∏ñ‡πâ‡∏≤ endpoint ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ fallback
        console.log('üîÑ Trying fallback endpoint...');
        try {
          await this.loadAreasAlternative();
        } catch (fallbackError) {
          console.error('‚ùå Fallback also failed:', fallbackError);
          this.notificationService.showNotification(
            'error',
            '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
            '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
          );
        }
      } else {
        this.notificationService.showNotification(
          'error',
          '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
          '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'
        );
      }
    }
  }
  async loadAreasAlternative() {
    try {
      const token = await this.currentUser.getIdToken();
      // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ endpoint /api/areas
      const response = await lastValueFrom(
        this.http.get<any[]>(
          `${this.apiUrl}/api/areas`,
          {
            headers: { 'Authorization': `Bearer ${token}` }
          }
        )
      );
      if (response && Array.isArray(response)) {
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• areas ‡πÄ‡∏õ‡πá‡∏ô format ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        const areaGroups: AreaGroup[] = response.map(area => ({
          areasid: area.id || area.areasid || '',
          areaName: area.name || area.location || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà',
          measurements: area.measurements || [],
          totalMeasurements: area.measurements?.length || 0,
          averages: {
            temperature: 0,
            moisture: 0,
            nitrogen: 0,
            phosphorus: 0,
            potassium: 0,
            ph: 0
          },
          lastMeasurementDate: area.measurements?.[0]?.date || ''
        }));
        this.areas = areaGroups;
        this.areaGroups = areaGroups;
        if (areaGroups.length === 0) {
          this.notificationService.showNotification(
            'info',
            '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
            '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
          );
        }
      } else {
        this.areas = [];
        this.areaGroups = [];
        this.notificationService.showNotification(
          'info',
          '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
          '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
        );
      }
    } catch (altError: any) {
      console.error('‚ùå Alternative endpoint also failed:', altError);
      if (altError.status === 401) {
        this.notificationService.showNotification(
          'error',
          '‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö',
          '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà'
        );
        // Redirect to login
        this.router.navigate(['/login']);
      } else {
        this.areas = [];
        this.areaGroups = [];
        this.notificationService.showNotification(
          'info',
          '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
          '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'
        );
      }
    }
  }
  initializeMap() {
    if (!this.mapContainer || !this.selectedArea) return;
    this.map = new Map({
      container: this.mapContainer.nativeElement,
      style: 'streets-v2',
      center: [100.5018, 13.7563],
      zoom: 10,
    });
    if (this.selectedArea.measurements.length > 0) {
      this.selectedArea.measurements.forEach((m) => {
        if (m.lat && m.lng) {
          new Marker({ color: '#FF0000' })
            .setLngLat([m.lng, m.lat])
            .addTo(this.map!);
        }
      });
    }
  }
  getDisplayAreaName(area: AreaGroup): string {
    return area.areaName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà';
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö format ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
  formatNumber(value: any, decimals: number = 2): string {
    // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç error toFixed - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    if (value === null || value === undefined) {
      return '0.00';
    }
    
    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô number ‡∏Å‡πà‡∏≠‡∏ô
    const numValue = Number(value);
    
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô number ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (isNaN(numValue)) {
      console.warn('‚ö†Ô∏è formatNumber: Invalid number value:', value);
      return '0.00';
    }
    
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô finite number
    if (!isFinite(numValue)) {
      console.warn('‚ö†Ô∏è formatNumber: Non-finite number value:', value);
      return '0.00';
    }
    
    try {
      return numValue.toFixed(decimals);
    } catch (error) {
      console.error('‚ùå formatNumber error:', error, 'value:', value, 'type:', typeof value);
      return '0.00';
    }
  }
  viewAreaDetails(area: AreaGroup) {
    console.log('üó∫Ô∏è viewAreaDetails called with area:', area);
    console.log('üó∫Ô∏è Area measurements count:', area.measurements?.length);
    console.log('üó∫Ô∏è Area measurements data:', area.measurements);
    
    // ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ measurements (‡∏•‡∏î log ‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥)
    if (area.measurements && area.measurements.length > 0) {
      console.log('üìä Measurements to display:', area.measurements.length);
      // ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ measurement ‡πÅ‡∏£‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
      if (area.measurements[0]) {
        console.log('üìä Sample measurement:', {
          measurementid: area.measurements[0]['measurementid'],
          areasid: area.measurements[0]['areasid'],
          point_id: area.measurements[0]['point_id']
        });
      }
    } else {
      console.log('‚ö†Ô∏è No measurements to display for area:', area.areasid);
    }
    
    this.selectedArea = area;
    this.showAreaDetails = true;
    console.log('üó∫Ô∏è showAreaDetails set to true');
    
    // ‚úÖ Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
    console.log('üåê Frontend Display Status:');
    console.log('üåê isLoading:', this.isLoading);
    console.log('üåê showAreaDetails:', this.showAreaDetails);
    console.log('üåê areaGroups.length:', this.areaGroups.length);
    console.log('üåê selectedArea:', this.selectedArea);
    console.log('üåê selectedArea.measurements?.length:', this.selectedArea?.measurements?.length);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å DOM ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    setTimeout(() => {
      console.log('üó∫Ô∏è Calling showMapInAreaDetails after timeout');
      this.showMapInAreaDetails();
    }, 200);
  }
  fitMapToBounds() {
    if (
      !this.map ||
      !this.selectedArea ||
      this.selectedArea.measurements.length === 0
    )
      return;
    const validMeasurements = this.selectedArea.measurements.filter(
      (m) => m.lat !== undefined && m.lng !== undefined && !isNaN(m.lat!) && !isNaN(m.lng!)
    );
    if (validMeasurements.length === 0) {
      this.mapContainer.nativeElement.innerHTML = `
        <div style="display: flex; align-items: center; justify-content: center; height: 100%; background: #f5f5f5; color: #666;">
          <p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î</p>
        </div>
      `;
      return;
    }
    const lats = validMeasurements.map((m) => m.lat!);
    const lngs = validMeasurements.map((m) => m.lng!);
    const bounds = new LngLatBounds(
      [Math.min(...lngs), Math.min(...lats)],
      [Math.max(...lngs), Math.max(...lats)]
    );
    this.map.fitBounds(bounds, { padding: 50, maxZoom: 18 });
  }
  showAreaStatistics(area: AreaGroup) {
    const stats = area.averages;
    const message = `‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: ${area.areaName}
      ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î: ${area.totalMeasurements} ‡∏à‡∏∏‡∏î
      ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: ${area.lastMeasurementDate}
      ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:
      ‚Ä¢ ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${this.formatNumber(stats.temperature)}¬∞C
      ‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${this.formatNumber(stats.moisture)}%
      ‚Ä¢ ‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô: ${this.formatNumber(stats.nitrogen)} mg/kg
      ‚Ä¢ ‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™: ${this.formatNumber(stats.phosphorus)} mg/kg
      ‚Ä¢ ‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°: ${this.formatNumber(stats.potassium)} mg/kg
      ‚Ä¢ ‡∏Ñ‡πà‡∏≤ pH: ${this.formatNumber(stats.ph, 1)}`;
    this.notificationService.showNotification('info', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•', message);
  }
  viewMeasurementDetail(measurement: Measurement) {
    // ‡πÉ‡∏ä‡πâ device_id ‡∏à‡∏£‡∏¥‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const actualDeviceId = this.deviceMap[this.deviceId || ''] || this.deviceId;
    const measurementData = { 
      ...measurement, 
      deviceId: actualDeviceId,
      areasid: measurement.areasid || this.selectedArea?.areasid
    };
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö popup ‡∏´‡∏£‡∏∑‡∏≠ modal
    const detailMessage = `
‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà: ${measurement.measurementPoint || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}
‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date(measurement.date).toLocaleDateString('th-TH')}
‡πÄ‡∏ß‡∏•‡∏≤: ${new Date(measurement.date).toLocaleTimeString('th-TH')}
‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${measurement.temperature}¬∞C
‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${measurement.moisture}%
‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô: ${measurement.nitrogen} ppm
‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™: ${measurement.phosphorus} ppm
‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°: ${measurement.potassium} ppm
pH: ${measurement.ph}
‡∏û‡∏¥‡∏Å‡∏±‡∏î: ${measurement.lat}, ${measurement.lng}
    `.trim();
    this.notificationService.showNotification(
      'info',
      '‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î',
      detailMessage
    );
    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤ detail (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
    localStorage.setItem('selectedMeasurement', JSON.stringify(measurementData));
  }
  backToAreaList() {
    this.showAreaDetails = false;
    this.selectedArea = null;
    if (this.map) {
      this.map.remove();
      this.map = undefined;
    }
  }
  goBack() {
    this.location.back();
  }
  goToProfile() {
    this.router.navigate(['/profile']);
  }
  goToContactAdmin() {
    this.router.navigate(['/reports']);
  }
  toggleCardMenu() {
    this.showCardMenu = !this.showCardMenu;
  }
  closeCardMenu() {
    this.showCardMenu = false;
  }
  // ‡∏õ‡∏¥‡∏î menu ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å
  @HostListener('document:click', ['$event'])
  onDocumentClick(event: Event) {
    if (!(event.target as Element).closest('.card-menu')) {
      this.closeCardMenu();
    }
  }
  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏î‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  recommendSoilImprovement(area: AreaGroup | null): { message: string; fertilizers: FertilizerRecommendation[]; soilAnalysis: any; improvementPlan: any } {
    if (!area || !area.averages) {
      return {
        message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î',
        fertilizers: [],
        soilAnalysis: null,
        improvementPlan: null
      };
    }
    
    const { temperature, moisture, nitrogen, phosphorus, potassium, ph } = area.averages;
    
    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏î‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    const soilAnalysis = this.analyzeSoilCondition(ph, nitrogen, phosphorus, potassium, moisture, temperature);
    const improvementPlan = this.createImprovementPlan(soilAnalysis);
    
    let message = this.generateDetailedMessage(soilAnalysis);
    const fertilizers = this.getDetailedFertilizerRecommendations(soilAnalysis);
    
    return { message, fertilizers, soilAnalysis, improvementPlan };
  }

  // ‚úÖ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏î‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  private analyzeSoilCondition(ph: number, nitrogen: number, phosphorus: number, potassium: number, moisture: number, temperature: number) {
    return {
      ph: {
        value: ph,
        status: ph < 5.5 ? '‡∏Å‡∏£‡∏î‡∏°‡∏≤‡∏Å' : ph < 6.5 ? '‡∏Å‡∏£‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢' : ph < 7.5 ? '‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á' : ph < 8.5 ? '‡∏î‡πà‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢' : '‡∏î‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å',
        recommendation: ph < 6.0 ? '‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á' : ph > 8.0 ? '‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á' : '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°'
      },
      nitrogen: {
        value: nitrogen,
        status: nitrogen < 15 ? '‡∏Ç‡∏≤‡∏î‡∏°‡∏≤‡∏Å' : nitrogen < 25 ? '‡∏Ç‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢' : nitrogen < 40 ? '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°' : '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
        recommendation: nitrogen < 20 ? '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°' : nitrogen > 35 ? '‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà' : '‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠'
      },
      phosphorus: {
        value: phosphorus,
        status: phosphorus < 10 ? '‡∏Ç‡∏≤‡∏î‡∏°‡∏≤‡∏Å' : phosphorus < 20 ? '‡∏Ç‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢' : phosphorus < 30 ? '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°' : '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
        recommendation: phosphorus < 15 ? '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°' : phosphorus > 25 ? '‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà' : '‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠'
      },
      potassium: {
        value: potassium,
        status: potassium < 15 ? '‡∏Ç‡∏≤‡∏î‡∏°‡∏≤‡∏Å' : potassium < 25 ? '‡∏Ç‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢' : potassium < 40 ? '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°' : '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£',
        recommendation: potassium < 20 ? '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°' : potassium > 35 ? '‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà' : '‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠'
      },
      moisture: {
        value: moisture,
        status: moisture < 30 ? '‡πÅ‡∏´‡πâ‡∏á‡∏°‡∏≤‡∏Å' : moisture < 50 ? '‡πÅ‡∏´‡πâ‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢' : moisture < 70 ? '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°' : '‡∏ä‡∏∑‡πâ‡∏ô‡∏°‡∏≤‡∏Å',
        recommendation: moisture < 40 ? '‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥' : moisture > 75 ? '‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏ô‡πâ‡∏≥' : '‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠'
      },
      temperature: {
        value: temperature,
        status: temperature < 20 ? '‡πÄ‡∏¢‡πá‡∏ô' : temperature < 30 ? '‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°' : '‡∏£‡πâ‡∏≠‡∏ô',
        recommendation: temperature < 25 ? '‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä‡∏ó‡∏ô‡∏´‡∏ô‡∏≤‡∏ß' : temperature > 32 ? '‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä‡∏ó‡∏ô‡∏£‡πâ‡∏≠‡∏ô' : '‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'
      }
    };
  }

  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏î‡∏¥‡∏ô
  private createImprovementPlan(soilAnalysis: any) {
    const plan = {
      immediate: [] as string[],
      shortTerm: [] as string[],
      longTerm: [] as string[],
      monitoring: [] as string[]
    };

    // ‡πÅ‡∏ú‡∏ô‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô (1-2 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå)
    if (soilAnalysis.ph.recommendation === '‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á') {
      plan.immediate.push('‡∏õ‡∏£‡∏±‡∏ö pH ‡∏î‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏π‡∏ô‡∏Ç‡∏≤‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≥‡∏°‡∏∞‡∏ñ‡∏±‡∏ô');
    }
    if (soilAnalysis.moisture.recommendation === '‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥') {
      plan.immediate.push('‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠');
    }

    // ‡πÅ‡∏ú‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô (1-3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
    if (soilAnalysis.nitrogen.recommendation === '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°') {
      plan.shortTerm.push('‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥');
    }
    if (soilAnalysis.phosphorus.recommendation === '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°') {
      plan.shortTerm.push('‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥');
    }
    if (soilAnalysis.potassium.recommendation === '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°') {
      plan.shortTerm.push('‡πÉ‡∏™‡πà‡∏õ‡∏∏‡πã‡∏¢‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥');
    }

    // ‡πÅ‡∏ú‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏¢‡∏≤‡∏ß (3-12 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
    plan.longTerm.push('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πã‡∏¢‡∏´‡∏°‡∏±‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏∏‡πã‡∏¢‡∏Ñ‡∏≠‡∏Å');
    plan.longTerm.push('‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä‡∏õ‡∏∏‡πã‡∏¢‡∏™‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏î‡∏¥‡∏ô');
    plan.longTerm.push('‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡∏û‡∏∑‡∏ä‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏≠‡∏∏‡∏î‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡∏î‡∏¥‡∏ô');

    // ‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
    plan.monitoring.push('‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤ pH ‡∏ó‡∏∏‡∏Å 3 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô');
    plan.monitoring.push('‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∏‡∏Å 6 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô');
    plan.monitoring.push('‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡∏ä');

    return plan;
  }

  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
  private generateDetailedMessage(soilAnalysis: any): string {
    let message = 'üîç ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î:\n\n';
    
    message += `üìä ‡∏Ñ‡πà‡∏≤ pH: ${soilAnalysis.ph.value.toFixed(1)} (${soilAnalysis.ph.status}) - ${soilAnalysis.ph.recommendation}\n`;
    message += `üå± ‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô: ${soilAnalysis.nitrogen.value.toFixed(1)} mg/kg (${soilAnalysis.nitrogen.status}) - ${soilAnalysis.nitrogen.recommendation}\n`;
    message += `‚ö° ‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™: ${soilAnalysis.phosphorus.value.toFixed(1)} mg/kg (${soilAnalysis.phosphorus.status}) - ${soilAnalysis.phosphorus.recommendation}\n`;
    message += `üí™ ‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°: ${soilAnalysis.potassium.value.toFixed(1)} mg/kg (${soilAnalysis.potassium.status}) - ${soilAnalysis.potassium.recommendation}\n`;
    message += `üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${soilAnalysis.moisture.value.toFixed(1)}% (${soilAnalysis.moisture.status}) - ${soilAnalysis.moisture.recommendation}\n`;
    message += `üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${soilAnalysis.temperature.value.toFixed(1)}¬∞C (${soilAnalysis.temperature.status}) - ${soilAnalysis.temperature.recommendation}\n\n`;
    
    message += 'üí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: ';
    const recommendations = [];
    if (soilAnalysis.ph.recommendation === '‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á') recommendations.push('‡∏õ‡∏£‡∏±‡∏ö pH');
    if (soilAnalysis.nitrogen.recommendation === '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°') recommendations.push('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô');
    if (soilAnalysis.phosphorus.recommendation === '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°') recommendations.push('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™');
    if (soilAnalysis.potassium.recommendation === '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°') recommendations.push('‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°');
    if (soilAnalysis.moisture.recommendation === '‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥') recommendations.push('‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≥');
    
    if (recommendations.length === 0) {
      message += '‡∏î‡∏¥‡∏ô‡∏°‡∏µ‡∏™‡∏†‡∏≤‡∏û‡∏î‡∏µ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏•‡∏π‡∏Å‡∏û‡∏∑‡∏ä';
    } else {
      message += recommendations.join(', ');
    }
    
    return message;
  }

  // ‚úÖ ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏õ‡∏∏‡πã‡∏¢‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πã‡∏¢‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ó‡πâ‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î
  private getDetailedFertilizerRecommendations(soilAnalysis: any): FertilizerRecommendation[] {
    const fertilizers: FertilizerRecommendation[] = [];

    // ‡∏õ‡∏∏‡πã‡∏¢‡∏õ‡∏£‡∏±‡∏ö pH
    if (soilAnalysis.ph.recommendation === '‡∏ï‡πâ‡∏≠‡∏á‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á') {
      if (soilAnalysis.ph.value < 6.0) {
        fertilizers.push({
          formula: '‡∏õ‡∏π‡∏ô‡∏Ç‡∏≤‡∏ß (CaCO3)',
          brand: '‡∏õ‡∏π‡∏ô‡∏Ç‡∏≤‡∏ß‡∏ï‡∏£‡∏≤‡πÑ‡∏Å‡πà, ‡∏õ‡∏π‡∏ô‡∏Ç‡∏≤‡∏ß‡∏ï‡∏£‡∏≤‡∏ä‡πâ‡∏≤‡∏á, ‡∏õ‡∏π‡∏ô‡∏Ç‡∏≤‡∏ß‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏∑‡∏≠',
          amount: '1-2 ‡∏ï‡∏±‡∏ô/‡πÑ‡∏£‡πà',
          description: '‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏î‡∏Ç‡∏≠‡∏á‡∏î‡∏¥‡∏ô ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏Ñ‡∏•‡πÄ‡∏ã‡∏µ‡∏¢‡∏°',
          application: '‡∏´‡∏ß‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏ñ‡∏Å‡∏•‡∏ö',
          timing: '‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏•‡∏π‡∏Å 2-4 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',
          price: '800-1,200 ‡∏ö‡∏≤‡∏ó/‡∏ï‡∏±‡∏ô',
          availability: '‡∏´‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£'
        });
      } else if (soilAnalysis.ph.value > 8.0) {
        fertilizers.push({
          formula: '‡∏Å‡∏≥‡∏°‡∏∞‡∏ñ‡∏±‡∏ô (S)',
          brand: '‡∏Å‡∏≥‡∏°‡∏∞‡∏ñ‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡πÑ‡∏Å‡πà, ‡∏Å‡∏≥‡∏°‡∏∞‡∏ñ‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏ä‡πâ‡∏≤‡∏á',
          amount: '100-200 ‡∏Å‡∏Å./‡πÑ‡∏£‡πà',
          description: '‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏î‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏î‡∏¥‡∏ô',
          application: '‡∏´‡∏ß‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏ñ‡∏Å‡∏•‡∏ö',
          timing: '‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏•‡∏π‡∏Å 3-4 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',
          price: '25-35 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏Å.',
          availability: '‡∏´‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£'
        });
      }
    }

    // ‡∏õ‡∏∏‡πã‡∏¢‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô
    if (soilAnalysis.nitrogen.recommendation === '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°') {
      fertilizers.push({
        formula: '‡∏õ‡∏∏‡πã‡∏¢‡∏¢‡∏π‡πÄ‡∏£‡∏µ‡∏¢ (46-0-0)',
        brand: '‡∏¢‡∏π‡πÄ‡∏£‡∏µ‡∏¢‡∏ï‡∏£‡∏≤‡πÑ‡∏Å‡πà, ‡∏¢‡∏π‡πÄ‡∏£‡∏µ‡∏¢‡∏ï‡∏£‡∏≤‡∏ä‡πâ‡∏≤‡∏á, ‡∏¢‡∏π‡πÄ‡∏£‡∏µ‡∏¢‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏∑‡∏≠, ‡∏¢‡∏π‡πÄ‡∏£‡∏µ‡∏¢‡∏ï‡∏£‡∏≤‡πÇ‡∏Ñ',
        amount: '20-30 ‡∏Å‡∏Å./‡πÑ‡∏£‡πà',
        description: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô‡πÉ‡∏ô‡∏î‡∏¥‡∏ô ‡πÄ‡∏£‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏£‡∏¥‡∏ç‡πÄ‡∏ï‡∏¥‡∏ö‡πÇ‡∏ï‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö',
        application: '‡∏´‡∏ß‡πà‡∏≤‡∏ô‡∏£‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏ô‡∏ï‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÇ‡∏£‡∏¢‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ß',
        timing: '‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏ï‡∏Å‡πÉ‡∏ö‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡∏î‡∏≠‡∏Å',
        price: '18-22 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏Å.',
        availability: '‡∏´‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£'
      });

      fertilizers.push({
        formula: '‡∏õ‡∏∏‡πã‡∏¢‡πÅ‡∏≠‡∏°‡πÇ‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏ï (21-0-0)',
        brand: '‡πÅ‡∏≠‡∏°‡πÇ‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏ï‡∏ï‡∏£‡∏≤‡πÑ‡∏Å‡πà, ‡∏ï‡∏£‡∏≤‡∏ä‡πâ‡∏≤‡∏á',
        amount: '25-35 ‡∏Å‡∏Å./‡πÑ‡∏£‡πà',
        description: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏°‡∏∞‡∏ñ‡∏±‡∏ô ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏¥‡∏ô‡∏î‡πà‡∏≤‡∏á',
        application: '‡∏´‡∏ß‡πà‡∏≤‡∏ô‡∏£‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏ô‡∏ï‡πâ‡∏ô',
        timing: '‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏ï‡∏Å‡πÉ‡∏ö‡πÉ‡∏´‡∏°‡πà',
        price: '15-18 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏Å.',
        availability: '‡∏´‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£'
      });
    }

    // ‡∏õ‡∏∏‡πã‡∏¢‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™
    if (soilAnalysis.phosphorus.recommendation === '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°') {
      fertilizers.push({
        formula: '‡∏õ‡∏∏‡πã‡∏¢‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏ü‡∏≠‡∏™‡πÄ‡∏ü‡∏ï (0-46-0)',
        brand: '‡∏ã‡∏∏‡∏õ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡∏ü‡∏≠‡∏™‡πÄ‡∏ü‡∏ï‡∏ï‡∏£‡∏≤‡πÑ‡∏Å‡πà, ‡∏ï‡∏£‡∏≤‡∏ä‡πâ‡∏≤‡∏á, ‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏∑‡∏≠',
        amount: '15-25 ‡∏Å‡∏Å./‡πÑ‡∏£‡πà',
        description: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™‡πÉ‡∏ô‡∏î‡∏¥‡∏ô ‡πÄ‡∏£‡πà‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏î‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏ú‡∏•',
        application: '‡πÉ‡∏™‡πà‡∏£‡∏≠‡∏á‡∏Å‡πâ‡∏ô‡∏´‡∏•‡∏∏‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏ß‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏ñ‡∏Å‡∏•‡∏ö',
        timing: '‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏•‡∏π‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≠‡∏Å‡∏î‡∏≠‡∏Å',
        price: '22-28 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏Å.',
        availability: '‡∏´‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£'
      });

      fertilizers.push({
        formula: '‡∏õ‡∏∏‡πã‡∏¢‡πÑ‡∏î‡πÅ‡∏≠‡∏°‡πÇ‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡∏ü‡∏≠‡∏™‡πÄ‡∏ü‡∏ï (18-46-0)',
        brand: 'DAP ‡∏ï‡∏£‡∏≤‡πÑ‡∏Å‡πà, ‡∏ï‡∏£‡∏≤‡∏ä‡πâ‡∏≤‡∏á',
        amount: '20-30 ‡∏Å‡∏Å./‡πÑ‡∏£‡πà',
        description: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏¥‡∏ô‡∏Ç‡∏≤‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ò‡∏≤‡∏ï‡∏∏',
        application: '‡πÉ‡∏™‡πà‡∏£‡∏≠‡∏á‡∏Å‡πâ‡∏ô‡∏´‡∏•‡∏∏‡∏°',
        timing: '‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏•‡∏π‡∏Å',
        price: '25-30 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏Å.',
        availability: '‡∏´‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£'
      });
    }

    // ‡∏õ‡∏∏‡πã‡∏¢‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°
    if (soilAnalysis.potassium.recommendation === '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°') {
      fertilizers.push({
        formula: '‡∏õ‡∏∏‡πã‡∏¢‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡∏Ñ‡∏•‡∏≠‡πÑ‡∏£‡∏î‡πå (0-0-60)',
        brand: '‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡∏Ñ‡∏•‡∏≠‡πÑ‡∏£‡∏î‡πå‡∏ï‡∏£‡∏≤‡πÑ‡∏Å‡πà, ‡∏ï‡∏£‡∏≤‡∏ä‡πâ‡∏≤‡∏á, ‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏∑‡∏≠',
        amount: '10-20 ‡∏Å‡∏Å./‡πÑ‡∏£‡πà',
        description: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡πÉ‡∏ô‡∏î‡∏¥‡∏ô ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≤‡∏ô‡∏ó‡∏≤‡∏ô‡πÇ‡∏£‡∏Ñ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏ú‡∏•',
        application: '‡∏´‡∏ß‡πà‡∏≤‡∏ô‡∏£‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏ô‡∏ï‡πâ‡∏ô',
        timing: '‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≠‡∏Å‡∏î‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß',
        price: '28-35 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏Å.',
        availability: '‡∏´‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£'
      });

      fertilizers.push({
        formula: '‡∏õ‡∏∏‡πã‡∏¢‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏ï (0-0-50)',
        brand: '‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡∏ã‡∏±‡∏•‡πÄ‡∏ü‡∏ï‡∏ï‡∏£‡∏≤‡πÑ‡∏Å‡πà, ‡∏ï‡∏£‡∏≤‡∏ä‡πâ‡∏≤‡∏á',
        amount: '15-25 ‡∏Å‡∏Å./‡πÑ‡∏£‡πà',
        description: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏°‡∏∞‡∏ñ‡∏±‡∏ô ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏¥‡∏ô‡∏Ç‡∏≤‡∏î‡∏Å‡∏≥‡∏°‡∏∞‡∏ñ‡∏±‡∏ô',
        application: '‡∏´‡∏ß‡πà‡∏≤‡∏ô‡∏£‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏ô‡∏ï‡πâ‡∏ô',
        timing: '‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≠‡∏Å‡∏î‡∏≠‡∏Å',
        price: '30-38 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏Å.',
        availability: '‡∏´‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£'
      });
    }

    // ‡∏õ‡∏∏‡πã‡∏¢‡∏ú‡∏™‡∏°
    if (soilAnalysis.nitrogen.recommendation === '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°' && 
        soilAnalysis.phosphorus.recommendation === '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°' && 
        soilAnalysis.potassium.recommendation === '‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°') {
      fertilizers.push({
        formula: '‡∏õ‡∏∏‡πã‡∏¢‡∏ú‡∏™‡∏° 15-15-15',
        brand: '‡∏õ‡∏∏‡πã‡∏¢‡∏ú‡∏™‡∏°‡∏ï‡∏£‡∏≤‡πÑ‡∏Å‡πà, ‡∏ï‡∏£‡∏≤‡∏ä‡πâ‡∏≤‡∏á, ‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏∑‡∏≠, ‡∏ï‡∏£‡∏≤‡πÇ‡∏Ñ',
        amount: '30-50 ‡∏Å‡∏Å./‡πÑ‡∏£‡πà',
        description: '‡∏õ‡∏∏‡πã‡∏¢‡∏ú‡∏™‡∏°‡∏Ñ‡∏£‡∏ö‡∏ò‡∏≤‡∏ï‡∏∏ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏¥‡∏ô‡∏Ç‡∏≤‡∏î‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡∏ô‡∏¥‡∏î',
        application: '‡∏´‡∏ß‡πà‡∏≤‡∏ô‡∏£‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏ô‡∏ï‡πâ‡∏ô',
        timing: '‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏ï‡∏Å‡πÉ‡∏ö‡πÉ‡∏´‡∏°‡πà',
        price: '20-25 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏Å.',
        availability: '‡∏´‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£'
      });

      fertilizers.push({
        formula: '‡∏õ‡∏∏‡πã‡∏¢‡∏ú‡∏™‡∏° 16-16-16',
        brand: '‡∏õ‡∏∏‡πã‡∏¢‡∏ú‡∏™‡∏°‡∏ï‡∏£‡∏≤‡πÑ‡∏Å‡πà, ‡∏ï‡∏£‡∏≤‡∏ä‡πâ‡∏≤‡∏á',
        amount: '25-40 ‡∏Å‡∏Å./‡πÑ‡∏£‡πà',
        description: '‡∏õ‡∏∏‡πã‡∏¢‡∏ú‡∏™‡∏°‡∏™‡∏°‡∏î‡∏∏‡∏• ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏û‡∏∑‡∏ä‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
        application: '‡∏´‡∏ß‡πà‡∏≤‡∏ô‡∏£‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏ô‡∏ï‡πâ‡∏ô',
        timing: '‡∏ä‡πà‡∏ß‡∏á‡πÅ‡∏ï‡∏Å‡πÉ‡∏ö‡πÉ‡∏´‡∏°‡πà',
        price: '22-28 ‡∏ö‡∏≤‡∏ó/‡∏Å‡∏Å.',
        availability: '‡∏´‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£'
      });
    }

    // ‡∏õ‡∏∏‡πã‡∏¢‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡πå
    fertilizers.push({
      formula: '‡∏õ‡∏∏‡πã‡∏¢‡∏´‡∏°‡∏±‡∏Å',
      brand: '‡∏õ‡∏∏‡πã‡∏¢‡∏´‡∏°‡∏±‡∏Å‡∏ï‡∏£‡∏≤‡πÑ‡∏Å‡πà, ‡∏ï‡∏£‡∏≤‡∏ä‡πâ‡∏≤‡∏á, ‡∏ï‡∏£‡∏≤‡πÄ‡∏™‡∏∑‡∏≠, ‡∏õ‡∏∏‡πã‡∏¢‡∏´‡∏°‡∏±‡∏Å‡∏ó‡πâ‡∏≠‡∏á‡∏ñ‡∏¥‡πà‡∏ô',
      amount: '2-4 ‡∏ï‡∏±‡∏ô/‡πÑ‡∏£‡πà',
      description: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏î‡∏¥‡∏ô',
      application: '‡∏´‡∏ß‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏ñ‡∏Å‡∏•‡∏ö',
      timing: '‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏•‡∏π‡∏Å 1-2 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô',
      price: '1,500-2,500 ‡∏ö‡∏≤‡∏ó/‡∏ï‡∏±‡∏ô',
      availability: '‡∏´‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£'
    });

    fertilizers.push({
      formula: '‡∏õ‡∏∏‡πã‡∏¢‡∏Ñ‡∏≠‡∏Å',
      brand: '‡∏õ‡∏∏‡πã‡∏¢‡∏Ñ‡∏≠‡∏Å‡∏ß‡∏±‡∏ß, ‡∏õ‡∏∏‡πã‡∏¢‡∏Ñ‡∏≠‡∏Å‡πÑ‡∏Å‡πà, ‡∏õ‡∏∏‡πã‡∏¢‡∏Ñ‡∏≠‡∏Å‡∏´‡∏°‡∏π',
      amount: '1-2 ‡∏ï‡∏±‡∏ô/‡πÑ‡∏£‡πà',
      description: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏¥‡∏ô‡∏ó‡∏£‡∏µ‡∏¢‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡πÅ‡∏•‡∏∞‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£',
      application: '‡∏´‡∏ß‡πà‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏ñ‡∏Å‡∏•‡∏ö',
      timing: '‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏•‡∏π‡∏Å 2-3 ‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå',
      price: '800-1,500 ‡∏ö‡∏≤‡∏ó/‡∏ï‡∏±‡∏ô',
      availability: '‡∏´‡∏≤‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏Å‡∏©‡∏ï‡∏£'
    });

    return fertilizers;
  }

  // ‚úÖ Helper functions for template
  getAnalysisLabel(key: string): string {
    const labels: { [key: string]: string } = {
      'ph': '‡∏Ñ‡πà‡∏≤ pH',
      'nitrogen': '‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô',
      'phosphorus': '‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™',
      'potassium': '‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°',
      'moisture': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô',
      'temperature': '‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥'
    };
    return labels[key] || key;
  }

  getStatusClass(status: string): string {
    if (status.includes('‡∏Ç‡∏≤‡∏î‡∏°‡∏≤‡∏Å') || status.includes('‡∏Å‡∏£‡∏î‡∏°‡∏≤‡∏Å') || status.includes('‡∏î‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å') || status.includes('‡πÅ‡∏´‡πâ‡∏á‡∏°‡∏≤‡∏Å') || status.includes('‡∏ä‡∏∑‡πâ‡∏ô‡∏°‡∏≤‡∏Å')) {
      return 'status-critical';
    } else if (status.includes('‡∏Ç‡∏≤‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢') || status.includes('‡∏Å‡∏£‡∏î‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢') || status.includes('‡∏î‡πà‡∏≤‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢') || status.includes('‡πÅ‡∏´‡πâ‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢')) {
      return 'status-warning';
    } else if (status.includes('‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°') || status.includes('‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏≤‡∏á')) {
      return 'status-good';
    } else if (status.includes('‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£') || status.includes('‡∏£‡πâ‡∏≠‡∏ô')) {
      return 'status-excess';
    }
    return 'status-normal';
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
  recommendCrops(area: AreaGroup | null): string[] {
    if (!area || !area.averages) {
      return ['‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î'];
    }
    const { temperature, moisture, nitrogen, phosphorus, potassium, ph } = area.averages;
    const crops: string[] = [];
    // ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡∏î‡∏¥‡∏ô
    if (ph >= 6.0 && ph <= 7.5) {
      if (moisture >= 50 && moisture <= 80) {
        if (temperature >= 20 && temperature <= 35) {
          crops.push('‡∏Ç‡πâ‡∏≤‡∏ß', '‡∏Ç‡πâ‡∏≤‡∏ß‡πÇ‡∏û‡∏î', '‡∏≠‡πâ‡∏≠‡∏¢');
        }
        if (nitrogen >= 20 && phosphorus >= 15) {
          crops.push('‡∏ñ‡∏±‡πà‡∏ß‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á', '‡∏ñ‡∏±‡πà‡∏ß‡∏•‡∏¥‡∏™‡∏á');
        }
        if (potassium >= 15) {
          crops.push('‡∏°‡∏±‡∏ô‡∏™‡∏≥‡∏õ‡∏∞‡∏´‡∏•‡∏±‡∏á', '‡∏¢‡∏≤‡∏á‡∏û‡∏≤‡∏£‡∏≤');
        }
      }
    }
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏∑‡∏ä‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ï‡∏≤‡∏°‡∏™‡∏†‡∏≤‡∏û‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    if (crops.length === 0) {
      crops.push('‡∏û‡∏∑‡∏ä‡∏ú‡∏±‡∏Å‡∏™‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡∏ß', '‡πÑ‡∏°‡πâ‡∏î‡∏≠‡∏Å‡πÑ‡∏°‡πâ‡∏õ‡∏£‡∏∞‡∏î‡∏±‡∏ö');
    }
    return crops;
  }
  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
  showMapInAreaDetails() {
    console.log('üó∫Ô∏è showMapInAreaDetails called');
    console.log('üó∫Ô∏è selectedArea:', this.selectedArea);
    
    if (!this.selectedArea) {
      console.log('‚ö†Ô∏è No selectedArea');
      return;
    }
    
    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ measurements
    if (!this.selectedArea.measurements.length) {
      console.log('‚ö†Ô∏è No measurements, showing empty map');
      this.showEmptyMap();
      return;
    }
    
    console.log('üó∫Ô∏è measurements:', this.selectedArea.measurements);
    
    // ‡πÉ‡∏ä‡πâ setTimeout ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ DOM ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡πà‡∏≠‡∏ô
    setTimeout(() => {
      const mapContainer = document.querySelector('#mapContainer') as HTMLElement;
      console.log('üó∫Ô∏è mapContainer:', mapContainer);
      
      if (!mapContainer) {
        console.log('‚ùå Map container not found');
        return;
      }
      
      // ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      mapContainer.innerHTML = '';
      console.log('üó∫Ô∏è Map container cleared');
      
      // Creating MapTiler map
      
      // Processing measurements for map
      
      // Debug: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• measurements ‡∏ó‡∏µ‡πà‡∏°‡∏µ lat/lng
      const measurementsWithCoords = this.selectedArea!.measurements.filter(m => m.lat && m.lng);
      console.log('üó∫Ô∏è measurementsWithCoords:', measurementsWithCoords.length);
      
      // Debug: ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• measurements ‡∏ó‡∏µ‡πà‡∏°‡∏µ lat/lng ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô 0
      const measurementsWithValidCoords = this.selectedArea!.measurements.filter(m => {
        const lat = parseFloat(String(m.lat || '0'));
        const lng = parseFloat(String(m.lng || '0'));
        return !isNaN(lat) && !isNaN(lng) && lat !== 0 && lng !== 0;
      });
      console.log('üó∫Ô∏è measurementsWithValidCoords:', measurementsWithValidCoords.length);
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏∏‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
      const validMeasurements = this.selectedArea!.measurements.filter(m => {
        const lat = parseFloat(String(m.lat || '0'));
        const lng = parseFloat(String(m.lng || '0'));
        return !isNaN(lat) && !isNaN(lng) && lat !== 0 && lng !== 0;
      });
      
      console.log('üó∫Ô∏è validMeasurements:', validMeasurements.length);
      
      if (validMeasurements.length === 0) {
        console.log('‚ö†Ô∏è No valid measurements with coordinates, showing simple map');
        this.showSimpleMap(mapContainer);
        return;
      }
      
      const centerLat = validMeasurements.reduce((sum, m) => sum + parseFloat(String(m.lat || '0')), 0) / validMeasurements.length;
      const centerLng = validMeasurements.reduce((sum, m) => sum + parseFloat(String(m.lng || '0')), 0) / validMeasurements.length;
      
      console.log('üó∫Ô∏è Map center:', [centerLng, centerLat]);
      
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö MapTiler SDK - ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ measurement
      try {
        this.map = new Map({
          container: mapContainer,
          style: `https://api.maptiler.com/maps/satellite/style.json?key=${environment.mapTilerApiKey}`,
          center: [centerLng, centerLat], // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ
          zoom: 17, // ‚úÖ ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ì‡∏∞
          pitch: 0,
          bearing: 0
        });
        
        console.log('üó∫Ô∏è Map created successfully');
        
        const bounds = new LngLatBounds();
        let hasPoint = false;
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á markers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î
        const markers: any[] = [];
        console.log('üó∫Ô∏è Creating markers for validMeasurements:', validMeasurements.length);
        validMeasurements.forEach((measurement, index) => {
          // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å database ‡πÅ‡∏ó‡∏ô‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏õ‡∏•‡∏≠‡∏°
          const lat = parseFloat(String(measurement.lat || '0'));
          const lng = parseFloat(String(measurement.lng || '0'));
          
          console.log(`üó∫Ô∏è Processing measurement ${index + 1}:`, { 
            lat, 
            lng, 
            measurementid: measurement['measurementid'],
            areasid: measurement['areasid'],
            point_id: measurement['point_id'],
            temperature: measurement['temperature'],
            moisture: measurement['moisture']
          });
          
          // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å database
          if (!isNaN(lat) && !isNaN(lng) && lat !== 0 && lng !== 0) {
            // ‡∏™‡∏£‡πâ‡∏≤‡∏á marker ‡πÅ‡∏ö‡∏ö MapTiler SDK
            const marker = new Marker({ 
              color: '#4ecdc4',
              scale: 1.5
            }).setLngLat([lng, lat]).addTo(this.map!);
            
            console.log(`üó∫Ô∏è Marker ${index + 1} created at:`, [lng, lat]);
            
            // ‡πÄ‡∏û‡∏¥‡πà‡∏° popup ‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ - Simple Clean Design
            marker.setPopup(new Popup({
              offset: [0, -15],
              closeButton: true,
              closeOnClick: false,
              maxWidth: '300px',
              className: 'simple-popup'
            }).setHTML(`
                <div style="font-family: Arial, sans-serif; padding: 10px;">
                  <div style="font-weight: bold; margin-bottom: 8px; font-size: 13px;">
                    ‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà ${measurement['point_id'] || index + 1}
                  </div>
                  
                  <div style="font-size: 11px; line-height: 1.6;">
                    <div>‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${this.formatNumber(parseFloat(String(measurement['temperature'] || '0')) || 0)}¬∞C</div>
                    <div>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${this.formatNumber(parseFloat(String(measurement['moisture'] || '0')) || 0)}%</div>
                    <div>pH: ${this.formatNumber(parseFloat(String(measurement['ph'] || '0')) || 0, 1)}</div>
                    <div>‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô: ${this.formatNumber(parseFloat(String(measurement['nitrogen'] || '0')) || 0)}</div>
                    <div>‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™: ${this.formatNumber(parseFloat(String(measurement['phosphorus'] || '0')) || 0)}</div>
                    <div>‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°: ${this.formatNumber(parseFloat(String(measurement['potassium'] || '0')) || 0)}</div>
                    
                    <div style="margin-top: 8px; padding-top: 8px; border-top: 1px solid #ddd;">
                      <div>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${measurement['measurement_date'] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</div>
                      <div>‡πÄ‡∏ß‡∏•‡∏≤: ${measurement['measurement_time'] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</div>
                      <div style="font-size: 10px; color: #666; margin-top: 4px;">
                        ${lat.toFixed(6)}, ${lng.toFixed(6)}
                      </div>
                    </div>
                  </div>
                </div>
              `));
            
            bounds.extend([lng, lat]);
            hasPoint = true;
            markers.push(marker);
            console.log(`üó∫Ô∏è Marker ${index + 1} added to map`);
          }
        });
        
        // ‡πÄ‡∏Å‡πá‡∏ö reference ‡∏Ç‡∏≠‡∏á markers
        this.markers = markers;
        console.log('üó∫Ô∏è Total markers created:', markers.length);
        
        this.map.once('load', () => {
          console.log('üó∫Ô∏è Map loaded');
          if (hasPoint) {
            console.log('üó∫Ô∏è Fitting bounds');
            this.map!.fitBounds(bounds, { padding: 40, maxZoom: 17, duration: 0 });
          }
        });
        
        console.log('üó∫Ô∏è MapTiler map initialized successfully');
        
      } catch (error) {
        console.error('‚ùå Error creating map:', error);
        this.showSimpleMap(mapContainer);
      }
      
    }, 100);
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡πà‡∏≤‡∏á (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ measurements)
  showEmptyMap() {
    console.log('üó∫Ô∏è showEmptyMap called');
    
    setTimeout(() => {
      const mapContainer = document.querySelector('#mapContainer') as HTMLElement;
      console.log('üó∫Ô∏è mapContainer for empty map:', mapContainer);
      
      if (!mapContainer) {
        console.log('‚ùå Map container not found for empty map');
        return;
      }
      
      // ‡∏•‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      mapContainer.innerHTML = '';
      console.log('üó∫Ô∏è Map container cleared for empty map');
      
      try {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö MapTiler SDK - ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
        this.map = new Map({
          container: mapContainer,
          style: `https://api.maptiler.com/maps/satellite/style.json?key=${environment.mapTilerApiKey}`,
          center: [103.25013790, 16.24645040], // ‚úÖ ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
          zoom: 15, // ‚úÖ ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
          pitch: 0,
          bearing: 0
        });
        
        console.log('üó∫Ô∏è Empty map created successfully');
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        this.map.once('load', () => {
          console.log('üó∫Ô∏è Empty map loaded');
          
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á marker ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
          const infoMarker = new Marker({ 
            color: '#ff9800',
            scale: 1.5
          }).setLngLat([103.25013790, 16.24645040]).addTo(this.map!);
          
          infoMarker.setPopup(new Popup({
            offset: [0, -15],
            closeButton: true,
            closeOnClick: false,
            maxWidth: '300px',
            className: 'info-popup'
          }).setHTML(`
            <div style="font-family: Arial, sans-serif; padding: 15px; text-align: center;">
              <div style="font-weight: bold; margin-bottom: 10px; font-size: 14px; color: #ff9800;">
                <i class="fas fa-info-circle"></i> ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î
              </div>
              <div style="font-size: 12px; line-height: 1.6; color: #666;">
                <div>‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: ${this.selectedArea?.areaName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</div>
                <div>‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î: 0 ‡∏à‡∏∏‡∏î</div>
                <div style="margin-top: 8px; padding-top: 8px; border-top: 1px solid #ddd;">
                  <div>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î</div>
                </div>
              </div>
            </div>
          `));
          
          // ‡πÄ‡∏õ‡∏¥‡∏î popup ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
          infoMarker.togglePopup();
        });
        
        console.log('üó∫Ô∏è Empty map initialized successfully');
        
      } catch (error) {
        console.error('‚ùå Error creating empty map:', error);
        this.showSimpleMap(mapContainer);
      }
      
    }, 100);
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ Leaflet)
  showSimpleMap(container: HTMLElement) {
    console.log('üó∫Ô∏è showSimpleMap called');
    console.log('üó∫Ô∏è container:', container);
    
    const measurements = this.selectedArea!.measurements;
    console.log('üó∫Ô∏è measurements for simple map:', measurements);
    
    let mapHtml = '<div style="background: #f0f0f0; padding: 20px; border-radius: 8px;">';
    mapHtml += '<h4>‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà</h4>';
    
    if (measurements.length === 0) {
      mapHtml += '<p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ</p>';
    } else {
      measurements.forEach((measurement, index) => {
        console.log(`üó∫Ô∏è Processing measurement ${index + 1} for simple map:`, measurement);
        
        if (measurement.lat && measurement.lng) {
          mapHtml += `
            <div style="margin: 10px 0; padding: 10px; background: white; border-radius: 5px; border-left: 4px solid #4CAF50;">
              <strong>‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà ${measurement.measurementPoint || index + 1}</strong><br>
              <small>‡∏û‡∏¥‡∏Å‡∏±‡∏î: ${measurement.lat}, ${measurement.lng}</small><br>
              <small>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${measurement['measurement_date'] || measurement.date || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</small><br>
              <small>‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${this.formatNumber(parseFloat(String(measurement.temperature || '0')) || 0)}¬∞C</small><br>
              <small>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${this.formatNumber(parseFloat(String(measurement.moisture || '0')) || 0)}%</small>
            </div>
          `;
        } else {
          mapHtml += `
            <div style="margin: 10px 0; padding: 10px; background: white; border-radius: 5px; border-left: 4px solid #ff9800;">
              <strong>‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà ${measurement.measurementPoint || index + 1}</strong><br>
              <small>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¥‡∏Å‡∏±‡∏î</small><br>
              <small>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${measurement['measurement_date'] || measurement.date || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</small>
            </div>
          `;
        }
      });
    }
    
    mapHtml += '</div>';
    container.innerHTML = mapHtml;
    console.log('üó∫Ô∏è Simple map HTML set');
  }
  
  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≤‡∏Å polygon bounds
  calculateAreaFromBounds(bounds: [number, number][]): number {
    if (bounds.length < 3) return 0;
    
    // ‡πÉ‡∏ä‡πâ Shoelace formula
    let area = 0;
    const n = bounds.length;
    for (let i = 0; i < n; i++) {
      const j = (i + 1) % n;
      area += bounds[i][0] * bounds[j][1];
      area -= bounds[j][0] * bounds[i][1];
    }
    area = Math.abs(area) / 2;
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å degrees ‡πÄ‡∏õ‡πá‡∏ô meters
    const latToMeters = 111000;
    const lngToMeters = 111000 * Math.cos(bounds[0][1] * Math.PI / 180);
    const areaInSquareMeters = area * latToMeters * lngToMeters;
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡πà (1 ‡πÑ‡∏£‡πà = 1,600 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£)
    return areaInSquareMeters / 1600;
  }
  
  // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÑ‡∏ó‡∏¢
  formatAreaToThaiUnits(areaInRai: number): string {
    if (areaInRai === 0) return '0.00 ‡πÑ‡∏£‡πà';
    
    const rai = Math.floor(areaInRai);
    const remainingArea = (areaInRai - rai) * 1600;
    const ngan = Math.floor(remainingArea / 400);
    const remainingAfterNgan = remainingArea % 400;
    const squareWa = Math.floor(remainingAfterNgan / 4);
    const squareMeters = Math.round(remainingAfterNgan % 4);
    
    let result = '';
    if (rai > 0) result += `${rai} ‡πÑ‡∏£‡πà`;
    if (ngan > 0) result += (result ? ' ' : '') + `${ngan} ‡∏á‡∏≤‡∏ô`;
    if (squareWa > 0) result += (result ? ' ' : '') + `${squareWa} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤`;
    if (squareMeters > 0) result += (result ? ' ' : '') + `${squareMeters} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£`;
    
    return result || '0.00 ‡πÑ‡∏£‡πà';
  }


  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏à‡∏≤‡∏Å measurements ‡∏à‡∏£‡∏¥‡∏á
  calculateAveragesFromMeasurements(measurements: any[]): {
    temperature: number;
    moisture: number;
    nitrogen: number;
    phosphorus: number;
    potassium: number;
    ph: number;
  } {
    if (measurements.length === 0) {
      return {
        temperature: 0,
        moisture: 0,
        nitrogen: 0,
        phosphorus: 0,
        potassium: 0,
        ph: 0
      };
    }

    const totals = measurements.reduce((acc, measurement) => ({
      temperature: acc.temperature + (measurement.temperature || 0),
      moisture: acc.moisture + (measurement.moisture || 0),
      nitrogen: acc.nitrogen + (measurement.nitrogen || 0),
      phosphorus: acc.phosphorus + (measurement.phosphorus || 0),
      potassium: acc.potassium + (measurement.potassium || 0),
      ph: acc.ph + (measurement.ph || 0)
    }), { temperature: 0, moisture: 0, nitrogen: 0, phosphorus: 0, potassium: 0, ph: 0 });

    const count = measurements.length;
    return {
      temperature: totals.temperature / count,
      moisture: totals.moisture / count,
      nitrogen: totals.nitrogen / count,
      phosphorus: totals.phosphorus / count,
      potassium: totals.potassium / count,
      ph: totals.ph / count
    };
  }

  // ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• measurements
  testMeasurementsData() {
    console.log('üß™ Testing measurements data...');
    console.log('üß™ selectedArea:', this.selectedArea);
    
    if (this.selectedArea && this.selectedArea.measurements) {
      console.log('üß™ measurements count:', this.selectedArea.measurements.length);
      this.selectedArea.measurements.forEach((measurement, index) => {
        console.log(`üß™ Measurement ${index + 1}:`, {
          measurementid: measurement['measurementid'],
          id: measurement['id'],
          measurement_id: measurement['measurement_id'],
          areasid: measurement['areasid'],
          point_id: measurement['point_id'],
          lat: measurement['lat'],
          lng: measurement['lng'],
          temperature: measurement['temperature'],
          moisture: measurement['moisture'],
          ph: measurement['ph'],
          nitrogen: measurement['nitrogen'],
          phosphorus: measurement['phosphorus'],
          potassium: measurement['potassium'],
          measurement_date: measurement['measurement_date'],
          measurement_time: measurement['measurement_time']
        });
      });
    } else {
      console.log('üß™ No measurements data found');
    }
  }

  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ä‡πà‡∏ß‡∏á Measurement ID
  getMeasurementIdRange(area: AreaGroup): string {
    console.log('üîç getMeasurementIdRange called for area:', area.areasid);
    console.log('üîç area.measurements:', area.measurements);
    
    if (!area.measurements || area.measurements.length === 0) {
      console.log('‚ö†Ô∏è No measurements found');
      return '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    }

    const measurementIds = area.measurements
      .map(m => {
        console.log('üîç Processing measurement:', m);
        const id = m['measurementid'] || m['id'] || m['measurement_id'];
        console.log('üîç Found ID:', id);
        console.log('üîç Measurement object keys:', Object.keys(m));
        console.log('üîç Measurement object values:', Object.values(m));
        return id;
      })
      .filter(id => id != null && id !== 'null' && id !== 'undefined' && id !== '')
      .sort((a, b) => Number(a) - Number(b));

    console.log('üîç Filtered measurement IDs:', measurementIds);

    if (measurementIds.length === 0) {
      console.log('‚ö†Ô∏è No valid measurement IDs found');
      return '‡πÑ‡∏°‡πà‡∏°‡∏µ ID';
    }

    if (measurementIds.length === 1) {
      console.log('‚úÖ Single measurement ID:', measurementIds[0]);
      return measurementIds[0].toString();
    }

    const minId = measurementIds[0];
    const maxId = measurementIds[measurementIds.length - 1];
    
    if (minId === maxId) {
      console.log('‚úÖ Same measurement ID:', minId);
      return minId.toString();
    }

    console.log('‚úÖ Measurement ID range:', `${minId}-${maxId}`);
    return `${minId}-${maxId}`;
  }
}
