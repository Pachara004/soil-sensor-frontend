import { Component } from '@angular/core';
import { Router } from '@angular/router';
import { CommonModule, Location } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { HttpClient } from '@angular/common/http';
import { Constants } from '../../../config/constants';
import { NotificationService } from '../../../service/notification.service';
import { Storage, ref, uploadBytes, getDownloadURL } from '@angular/fire/storage';
import { Auth, onAuthStateChanged } from '@angular/fire/auth';

interface SelectedImage {
  file: File;
  preview: string;
}

@Component({
  selector: 'app-reports',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './reports.component.html',
  styleUrl: './reports.component.scss',
})
export class ReportsComponent {
  subject: string = '';
  message: string = '';
  selectedImages: SelectedImage[] = [];
  isUploading: boolean = false;
  currentUser: any = null;
  private apiUrl: string;

  constructor(
    private router: Router,
    private location: Location,
    private http: HttpClient,
    private constants: Constants,
    private notificationService: NotificationService,
    private storage: Storage,
    private auth: Auth
  ) {
    this.apiUrl = this.constants.API_ENDPOINT;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö user authentication
    onAuthStateChanged(this.auth, (user) => {
      this.currentUser = user;
    });
  }

  goBack() {
    this.location.back();
  }

  onImageSelected(event: any) {
    const files = event.target.files;
    if (files && files.length > 0) {
      for (let i = 0; i < files.length; i++) {
        const file = files[i];
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB)
        if (file.size > 5 * 1024 * 1024) {
          this.notificationService.showNotification('error', '‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏ç‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ', '‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB');
          continue;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå
        if (!file.type.startsWith('image/')) {
          this.notificationService.showNotification('error', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
          continue;
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á preview
        const reader = new FileReader();
        reader.onload = (e: any) => {
          this.selectedImages.push({
            file: file,
            preview: e.target.result
          });
        };
        reader.readAsDataURL(file);
      }
    }
    
    // ‡∏•‡πâ‡∏≤‡∏á input ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å
    event.target.value = '';
  }

  removeImage(index: number) {
    this.selectedImages.splice(index, 1);
  }

  async uploadImagesToFirebase(): Promise<string[]> {
    if (this.selectedImages.length === 0) {
      return [];
    }

    const uploadPromises = this.selectedImages.map(async (imageData, index) => {
      const timestamp = Date.now();
      const fileName = `reports/${this.currentUser?.uid || 'anonymous'}/${timestamp}_${index}_${imageData.file.name}`;
      const storageRef = ref(this.storage, fileName);
      
      try {
        const snapshot = await uploadBytes(storageRef, imageData.file);
        const downloadURL = await getDownloadURL(snapshot.ref);
        return downloadURL;
      } catch (error) {
        console.error('Error uploading image:', error);
        throw error;
      }
    });

    return Promise.all(uploadPromises);
  }

  async sendReport() {
    if (!this.subject.trim() || !this.message.trim()) {
      this.notificationService.showNotification('error', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication
    if (!this.currentUser) {
      this.notificationService.showNotification('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
      return;
    }

    this.isUploading = true;

    try {
      // ‡∏î‡∏∂‡∏á Firebase ID token
      const token = await this.currentUser.getIdToken();
      
      if (!token) {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö Firebase token ‡πÑ‡∏î‡πâ');
      }

      // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á report ‡∏Å‡πà‡∏≠‡∏ô
      const reportData = {
        subject: this.subject,
        message: this.message,
        timestamp: new Date().toISOString(),
        userId: this.currentUser?.uid || null,
        userEmail: this.currentUser?.email || null
      };

      console.log('üìä Creating report:', reportData);
      
      const reportResponse = await this.http
        .post<any>(`${this.apiUrl}/api/reports`, reportData, {
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        })
        .toPromise();

      console.log('‚úÖ Report created:', reportResponse);
      const reportId = reportResponse.report?.reportid || reportResponse.reportid;

      if (!reportId) {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö Report ID ‡πÑ‡∏î‡πâ');
      }

      // 2. ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏õ‡∏¢‡∏±‡∏á Firebase Storage (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (this.selectedImages.length > 0) {
        this.notificationService.showNotification('info', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà');
        
        const imageUrls = await this.uploadImagesToFirebase();
        console.log('üì∏ Uploaded images:', imageUrls);

        // 3. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å URL ‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏ô table image
        for (const imageUrl of imageUrls) {
          try {
            const imageData = {
              reportid: reportId,
              imageUrl: imageUrl
            };

            console.log('üíæ Saving image to database:', imageData);
            
            await this.http
              .post(`${this.apiUrl}/api/images`, imageData, {
                headers: {
                  'Authorization': `Bearer ${token}`,
                  'Content-Type': 'application/json'
                }
              })
              .toPromise();

            console.log('‚úÖ Image saved to database:', imageUrl);
          } catch (imageError) {
            console.error('‚ùå Error saving image to database:', imageError);
            // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á report
          }
        }
      }

      this.notificationService.showNotification('success', '‡∏™‡πà‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', '‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏à‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡πá‡∏ß', true, '‡∏Å‡∏•‡∏±‡∏ö', () => {
        this.location.back();
      });

      // ‡∏•‡πâ‡∏≤‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
      this.subject = '';
      this.message = '';
      this.selectedImages = [];
    } catch (error: any) {
      console.error('‚ùå Error sending report:', error);
      
      let errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô';
      if (error.error?.message) {
        errorMessage = error.error.message;
      } else if (error.message) {
        errorMessage = error.message;
      }
      
      this.notificationService.showNotification('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', errorMessage);
    } finally {
      this.isUploading = false;
    }
  }
}
