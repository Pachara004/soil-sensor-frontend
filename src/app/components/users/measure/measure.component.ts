import { CommonModule } from '@angular/common';
import {
  Component,
  OnInit,
  ViewChild,
  ElementRef,
  AfterViewInit,
  OnDestroy,
} from '@angular/core';
import { FormsModule } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { Map, Marker, config, LngLatBounds, Popup } from '@maptiler/sdk';
import '@maptiler/sdk/dist/maptiler-sdk.css';
import { environment } from '../../../service/environment';
import { Constants } from '../../../config/constants';
import { lastValueFrom } from 'rxjs';
import { Database, ref, onValue, off } from '@angular/fire/database';
import { Auth, onAuthStateChanged } from '@angular/fire/auth';
import { NotificationService } from '../../../service/notification.service';

interface UserData {
  username: string;
  userID: string;
  name: string;
  email: string;
  phone: string;
  devices?: { [key: string]: boolean };
}

interface Measurement {
  deviceId: string;
  temperature: number;
  moisture: number;
  nitrogen: number;
  phosphorus: number;
  potassium: number;
  ph: number;
  location: string;
  lat: number;
  lng: number;
  date: string;
  timestamp: number;
  locationNameType?: 'custom' | 'auto';
  customLocationName?: string | null;
  autoLocationName?: string | null;
  areaId?: string; // ‡πÉ‡∏ä‡πâ undefined ‡πÅ‡∏ó‡∏ô null (‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ null ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô: string | null)
  measurementPoint?: number;
}

interface Area {
  id: string;
  name: string;
  deviceId: string;
  username: string;
  polygonBounds: [number, number][];
  createdDate: string;
  createdTimestamp: number;
  totalMeasurements: number;
  averages?: {
    temperature: number;
    moisture: number;
    nitrogen: number;
    phosphorus: number;
    potassium: number;
    ph: number;
  };
}

// ‚úÖ Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Firebase live data
interface FirebaseLiveData {
  temperature: number;
  moisture: number;
  nitrogen: number;
  phosphorus: number;
  potassium: number;
  ph: number;
  timestamp: number;
  deviceId: string;
  status: 'online' | 'offline';
}

@Component({
  selector: 'app-measure',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './measure.component.html',
  styleUrls: ['./measure.component.scss'],
})
export class MeasureComponent implements OnInit, AfterViewInit, OnDestroy {
  customLocationName: string = '';
  areaName: string = '';
  currentAreaId: string | null = null;
  currentArea: Area | null = null;
  measurements: Measurement[] = [];
  measurementCount = 0;

  // Minimal fields used by template
  isLoading = false;
  bounds: any = null;
  temperature = 0;
  moisture = 0;
  nitrogen = 0;
  phosphorus = 0;
  potassium = 0;
  ph = 0;
  locationDetail = '';
  showPopup = false;
  points: any[] = [];
  selectedPoints: [number, number][] = [];
  isSelectingArea = false;
  currentPolygon: any = null;
  measurementPoints: [number, number][] = []; // ‚úÖ ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏±‡∏î
  showMeasurementPoints = false; // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏±‡∏î

  // ‚úÖ Firebase live data properties
  liveData: FirebaseLiveData | null = null;
  isLiveDataConnected = false;
  liveDataSubscription: any = null;
  currentUser: any = null;
  
  // ‚úÖ User data properties
  userName: string = '';
  userEmail: string = '';
  userPhone: string = '';
  deviceName: string = '';
  deviceStatus: 'online' | 'offline' = 'offline';
  
  // ‚úÖ UI Control properties
  showUserInfo = true;  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  showDeviceInfo = false;
  showMainMap = false;
  showCardMenu = false;

  map: Map | undefined;
  @ViewChild('mapContainer') mapContainer!: ElementRef<HTMLElement>;

  private apiUrl: string;
  deviceId: string | null = null;
  username: string = '';

  constructor(
    private router: Router,
    private route: ActivatedRoute,
    private location: Location,
    private http: HttpClient,
    private constants: Constants,
    private database: Database,
    private auth: Auth,
    private notificationService: NotificationService
  ) {
    this.apiUrl = this.constants.API_ENDPOINT;
    config.apiKey = environment.mapTilerApiKey;
  }

  ngOnInit(): void {
    // ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å query parameters
    this.route.queryParams.subscribe(params => {
      if (params['deviceId']) {
        this.deviceId = params['deviceId'];
        this.deviceName = params['deviceName'] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        this.deviceStatus = params['deviceStatus'] || 'offline';
        
        console.log('üì± Device data received from main page:', {
          deviceId: this.deviceId,
          deviceName: this.deviceName,
          deviceStatus: this.deviceStatus
        });
      }
    });
    
    // ‚úÖ ‡πÉ‡∏ä‡πâ Firebase Auth ‡πÅ‡∏ó‡∏ô localStorage
    onAuthStateChanged(this.auth, (user) => {
      if (user) {
        this.currentUser = user;
        this.username = user.displayName || user.email?.split('@')[0] || '';
        console.log('‚úÖ User authenticated:', this.username);
        
        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÄ‡∏™‡∏°‡∏≠ ‡πÅ‡∏•‡∏∞ device (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å main page)
        this.loadUserAndDeviceData();
        
        // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase live data
        this.initializeFirebaseConnection();
        
        // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤
        this.showPopup = true;
        this.isSelectingArea = true;
        
        // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô popup ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏™‡∏î‡∏á popup
        setTimeout(() => {
          this.initializePopupMap();
        }, 1000);
      } else {
        console.log('‚ùå User not authenticated, redirecting to login');
        this.router.navigate(['/']);
      }
    });
  }

  ngAfterViewInit() {
    this.initializeMap();
    
    // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô popup ‡πÄ‡∏°‡∏∑‡πà‡∏≠ popup ‡πÅ‡∏™‡∏î‡∏á
    if (this.showPopup) {
      this.initializePopupMap();
    }
  }

  ngOnDestroy() {
    console.log('üîÑ Component destroying...');
    
    // ‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase Realtime Database ‡∏Å‡πà‡∏≠‡∏ô
    if (this.liveDataSubscription) {
      try {
        off(this.liveDataSubscription);
        console.log('‚úÖ Firebase Realtime Database connection closed');
      } catch (error) {
        console.warn('‚ö†Ô∏è Error closing Firebase connection:', error);
      }
      this.liveDataSubscription = null;
    }
    
    // ‚úÖ ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    if (this.map) {
      try {
        this.map.remove();
        console.log('‚úÖ Map removed');
      } catch (error) {
        console.warn('‚ö†Ô∏è Error removing map:', error);
      }
      this.map = undefined;
    }
    
    console.log('‚úÖ Component destroyed successfully');
  }

  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÅ‡∏•‡∏∞ device
  async loadUserAndDeviceData() {
    if (!this.currentUser) return;
    
    try {
      console.log('üë§ Loading user and device data...');
      
      // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
      this.userName = this.currentUser.displayName || this.currentUser.email?.split('@')[0] || '';
      this.userEmail = this.currentUser.email || '';
      
      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å backend
      const token = await this.currentUser.getIdToken();
      
      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÄ‡∏™‡∏°‡∏≠
      try {
        const userResponse = await lastValueFrom(
          this.http.get<any>(`${this.apiUrl}/api/auth/me`, {
            headers: { 'Authorization': `Bearer ${token}` }
          })
        );
        
        if (userResponse && userResponse.user) {
          const userData = userResponse.user;
          this.userName = userData.user_name || userData.username || this.userName;
          this.userEmail = userData.user_email || userData.email || this.userEmail;
          this.userPhone = userData.user_phone || userData.phone || '';
          
          console.log('üë§ User data loaded from backend:', {
            userName: this.userName,
            userEmail: this.userEmail,
            userPhone: this.userPhone
          });
        } else {
          console.log('‚ö†Ô∏è No user data in backend response, using Firebase data');
        }
      } catch (userError) {
        console.log('‚ö†Ô∏è Could not load user data from backend, using Firebase data:', userError);
      }
      
      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
      console.log('üë§ Final user data:', {
        userName: this.userName,
        userEmail: this.userEmail,
        userPhone: this.userPhone
      });
      
      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• device
      try {
        const devicesResponse = await lastValueFrom(
          this.http.get<any[]>(`${this.apiUrl}/api/devices`, {
            headers: { 'Authorization': `Bearer ${token}` }
          })
        );
        
        if (devicesResponse && devicesResponse.length > 0) {
          const device = devicesResponse[0]; // ‡πÉ‡∏ä‡πâ device ‡πÅ‡∏£‡∏Å
          
          // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å backend ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å main page
          if (!this.deviceId) {
            this.deviceName = device.device_name || device.displayName || device.id || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
            this.deviceId = device.id;
          }
          
          // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ device (‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå/‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå)
          this.checkDeviceStatus(this.deviceId || device.id);
          
          console.log('üì± Device data loaded:', {
            deviceId: this.deviceId,
            deviceName: this.deviceName,
            deviceStatus: this.deviceStatus
          });
        } else {
          console.log('‚ö†Ô∏è No devices found for user');
          if (!this.deviceId) {
            this.deviceName = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå';
          }
        }
      } catch (deviceError) {
        console.log('‚ö†Ô∏è Could not load device data from backend');
        if (!this.deviceId) {
          this.deviceName = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå';
        }
      }
      
    } catch (error) {
      console.error('‚ùå Error loading user and device data:', error);
    }
  }
  
  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ device (‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå/‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå)
  checkDeviceStatus(deviceId: string) {
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Firebase live data
    if (this.liveData && this.liveData.deviceId === deviceId) {
      this.deviceStatus = this.liveData.status || 'offline';
    } else {
      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ live data ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å timestamp
      if (this.liveData && this.liveData.timestamp) {
        const now = Date.now();
        const timeDiff = now - this.liveData.timestamp;
        const fiveMinutes = 5 * 60 * 1000; // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
        
        this.deviceStatus = timeDiff < fiveMinutes ? 'online' : 'offline';
      } else {
        this.deviceStatus = 'offline';
      }
    }
    
    console.log(`üì° Device ${deviceId} status: ${this.deviceStatus}`);
  }

  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase
  initializeFirebaseConnection() {
    if (!this.currentUser) {
      console.error('‚ùå No current user for Firebase connection');
      return;
    }
    
    // ‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (this.liveDataSubscription) {
      try {
        off(this.liveDataSubscription);
        console.log('‚úÖ Previous Firebase connection closed');
      } catch (error) {
        console.warn('‚ö†Ô∏è Error closing previous Firebase connection:', error);
      }
      this.liveDataSubscription = null;
    }
    
    console.log('üî• Initializing Firebase connection...');
    
    // ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Firebase Realtime Database - table live
    const liveDataRef = ref(this.database, 'live');
    
    this.liveDataSubscription = onValue(liveDataRef, (snapshot) => {
      try {
        const data = snapshot.val();
        if (data) {
          this.liveData = data;
          this.isLiveDataConnected = true;
          
          // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÉ‡∏ô UI
          this.updateMeasurementValues(data);
          
          console.log('üî• Live data updated:', data);
        } else {
          console.log('üî• No live data available');
          this.isLiveDataConnected = false;
        }
      } catch (error) {
        console.error('‚ùå Error processing Firebase data:', error);
        this.isLiveDataConnected = false;
      }
    }, (error) => {
      console.error('‚ùå Firebase connection error:', error);
      this.isLiveDataConnected = false;
    });
  }
  
  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÉ‡∏ô UI
  updateMeasurementValues(data: FirebaseLiveData) {
    this.temperature = data.temperature || 0;
    this.moisture = data.moisture || 0;
    this.nitrogen = data.nitrogen || 0;
    this.phosphorus = data.phosphorus || 0;
    this.potassium = data.potassium || 0;
    this.ph = data.ph || 0;
    
    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ device
    if (this.deviceId) {
      this.checkDeviceStatus(this.deviceId);
    }
    
    console.log('üìä Measurement values updated:', {
      temperature: this.temperature,
      moisture: this.moisture,
      nitrogen: this.nitrogen,
      phosphorus: this.phosphorus,
      potassium: this.potassium,
      ph: this.ph,
      deviceStatus: this.deviceStatus
    });
  }

  async loadMeasurements(deviceId: string) {
    try {
      const response = await lastValueFrom(
        this.http.get<Measurement[]>(
          `${this.apiUrl}/api/measurements?deviceId=${deviceId}`
        )
      );
      this.measurements = response || [];
      this.measurementCount = this.measurements.length;
      this.initializeMap();
    } catch (error) {
      console.error('Error loading measurements:', error);
      this.notificationService.showNotification('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }
  }

  async saveMeasurement() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö device status
    if (!this.deviceId) {
      this.notificationService.showNotification('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      return;
    }

    if (this.deviceStatus === 'offline') {
      this.notificationService.showNotification('error', '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå', '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå');
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö live data
    if (!this.liveData) {
      this.notificationService.showNotification('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
    if (this.liveData.temperature === undefined || 
        this.liveData.moisture === undefined || 
        this.liveData.nitrogen === undefined || 
        this.liveData.phosphorus === undefined || 
        this.liveData.potassium === undefined || 
        this.liveData.ph === undefined) {
      this.notificationService.showNotification('error', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }
    
    if (!this.currentUser) {
      console.error('‚ùå No current user found');
      this.notificationService.showNotification('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
      return;
    }
    
    console.log('üë§ Current user:', this.currentUser.uid, this.currentUser.email);
    console.log('üì± Selected device:', this.deviceName, 'Status:', this.deviceStatus);
    console.log('üìä Live data:', this.liveData);
    
    // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase live data
    const newMeasurement: Measurement = {
      deviceId: this.deviceId || 'unknown', // ‡πÉ‡∏ä‡πâ device ID ‡∏à‡∏≤‡∏Å component
      temperature: this.liveData.temperature,
      moisture: this.liveData.moisture,
      nitrogen: this.liveData.nitrogen,
      phosphorus: this.liveData.phosphorus,
      potassium: this.liveData.potassium,
      ph: this.liveData.ph,
      location: this.locationDetail || 'Auto Location',
      lat: this.selectedPoints.length > 0 ? this.selectedPoints[0][1] : 16.2464504, // ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡πÅ‡∏£‡∏Å ‡∏´‡∏£‡∏∑‡∏≠ default
      lng: this.selectedPoints.length > 0 ? this.selectedPoints[0][0] : 103.2501379,
      date: new Date().toISOString(),
      timestamp: Date.now(),
      locationNameType: this.locationDetail ? 'custom' : 'auto',
      customLocationName: this.locationDetail || null,
      autoLocationName: this.locationDetail ? null : 'Auto Location',
      areaId: this.currentAreaId ?? undefined,
      measurementPoint: this.measurementCount + 1,
    };

    try {
      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤ PostgreSQL ‡∏ú‡πà‡∏≤‡∏ô backend API
      const token = await this.currentUser.getIdToken();
      
      if (!token) {
        console.error('‚ùå Failed to get Firebase token');
        this.notificationService.showNotification('error', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö Token', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö Token ‡∏à‡∏≤‡∏Å Firebase ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
        return;
      }
      
      // Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend
      console.log('üìä Measurement request body:', newMeasurement);
      console.log('üîë Token length:', token.length);
      console.log('üîë Token preview:', token.substring(0, 20) + '...');
      console.log('üåê API URL:', `${this.apiUrl}/api/measurements`);
      
      const response = await lastValueFrom(
        this.http.post(`${this.apiUrl}/api/measurements`, newMeasurement, {
          headers: {
            'Authorization': `Bearer ${token}`
          }
        })
      );
      
      console.log('‚úÖ Measurement saved to PostgreSQL:', response);
      
      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
      this.measurements.push(newMeasurement);
      this.measurementCount++;
      await this.updateAreaStatistics();
      this.initializeMap();
      
      this.notificationService.showNotification('success', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
    } catch (error: any) {
      console.error('‚ùå Error saving measurement:', error);
      
      // ‡πÅ‡∏™‡∏î‡∏á error details
      if (error.status === 400) {
        console.error('‚ùå Bad Request - Validation Error:', error.error);
        this.notificationService.showNotification('error', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${error.error?.message || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å'}`);
      } else if (error.status === 401) {
        console.error('‚ùå Unauthorized - Token Error:', error.error);
        this.notificationService.showNotification('error', '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
      } else if (error.status === 500) {
        console.error('‚ùå Server Error:', error.error);
        this.notificationService.showNotification('error', '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      } else {
        console.error('‚ùå Unknown Error:', error);
        this.notificationService.showNotification('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      }
    }
  }

  async createArea() {
    if (!this.areaName) {
      this.notificationService.showNotification('error', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà');
      return;
    }
    const newArea: Area = {
      id: Date.now().toString(),
      name: this.areaName,
      deviceId: this.deviceId || '',
      username: '', // ‡∏•‡∏ö username ‡∏≠‡∏≠‡∏Å - ‡πÉ‡∏´‡πâ AuthInterceptor ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Firebase ID token
      polygonBounds: this.getPolygonBounds() || [],
      createdDate: new Date().toISOString(),
      createdTimestamp: Date.now(),
      totalMeasurements: 0,
    };
    try {
      await lastValueFrom(this.http.post(`${this.apiUrl}/api/areas`, newArea));
      this.currentAreaId = newArea.id;
      this.currentArea = newArea;
      this.areaName = '';
      this.initializeMap();
    } catch (error) {
      console.error('Error creating area:', error);
      this.notificationService.showNotification('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà');
    }
  }

  private getPolygonBounds(): [number, number][] {
    // ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å map interaction (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ)
    return this.measurements.length > 0
      ? this.measurements.map((m) => [m.lng, m.lat] as [number, number])
      : [];
  }

  async updateAreaStatistics() {
    if (!this.currentAreaId || this.measurements.length === 0) return;

    try {
      const totals = this.measurements.reduce(
        (acc, m) => ({
          temperature: acc.temperature + (m.temperature || 0),
          moisture: acc.moisture + (m.moisture || 0),
          nitrogen: acc.nitrogen + (m.nitrogen || 0),
          phosphorus: acc.phosphorus + (m.phosphorus || 0),
          potassium: acc.potassium + (m.potassium || 0),
          ph: acc.ph + (m.ph || 0),
        }),
        {
          temperature: 0,
          moisture: 0,
          nitrogen: 0,
          phosphorus: 0,
          potassium: 0,
          ph: 0,
        }
      );
      const count = this.measurements.length;
      const averages = {
        temperature: parseFloat((totals.temperature / count).toFixed(2)),
        moisture: parseFloat((totals.moisture / count).toFixed(2)),
        nitrogen: parseFloat((totals.nitrogen / count).toFixed(2)),
        phosphorus: parseFloat((totals.phosphorus / count).toFixed(2)),
        potassium: parseFloat((totals.potassium / count).toFixed(2)),
        ph: parseFloat((totals.ph / count).toFixed(2)),
      };

      await lastValueFrom(
        this.http.put(`${this.apiUrl}/api/areas/${this.currentAreaId}`, {
          totalMeasurements: count,
          averages,
          lastUpdated: Date.now(),
        })
      );

      if (this.currentArea) {
        this.currentArea.totalMeasurements = count;
        this.currentArea.averages = averages;
      }
    } catch (error) {
      console.error('Error updating area statistics:', error);
    }
  }

  showAreaStatistics() {
    if (!this.currentArea || !this.currentArea.averages) {
      this.notificationService.showNotification('info', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ');
      return;
    }
    const s = this.currentArea.averages;
    const statsMessage = `‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: ${this.currentArea.name}
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î: ${this.currentArea.totalMeasurements} ‡∏à‡∏∏‡∏î

‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:
‚Ä¢ ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${s.temperature}¬∞C
‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${s.moisture}%
‚Ä¢ ‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô: ${s.nitrogen} mg/kg
‚Ä¢ ‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™: ${s.phosphorus} mg/kg
‚Ä¢ ‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°: ${s.potassium} mg/kg
‚Ä¢ ‡∏Ñ‡πà‡∏≤ pH: ${s.ph}`;
    
    this.notificationService.showNotification('info', '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà', statsMessage);
  }

  startNewArea() {
    if (this.measurementCount > 0) {
      const confirmReset = window.confirm(
        `‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î ${this.measurementCount} ‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà "${this.areaName}"\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`
      );
      if (!confirmReset) return;
    }
    this.reopenPopup();
  }

  private reopenPopup() {
    this.currentAreaId = null;
    this.currentArea = null;
    this.measurements = [];
    this.measurementCount = 0;
    this.areaName = '';
    this.customLocationName = '';
    this.initializeMap();
  }

  closePopup() { 
    this.showPopup = false; 
    this.isSelectingArea = false;
    this.selectedPoints = [];
    this.measurementPoints = [];
    this.showMeasurementPoints = false;
    this.clearMarks();
  }
  
  stopPropagation(event: Event) { event.stopPropagation(); }
  
  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
  startAreaSelection() {
    this.isSelectingArea = true;
    this.selectedPoints = [];
    this.points = [];
    this.clearMarks();
    this.initializePopupMap();
    console.log('üéØ Started area selection mode');
  }
  
  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ popup ‡πÅ‡∏™‡∏î‡∏á
  onPopupShow() {
    setTimeout(() => {
      this.initializePopupMap();
    }, 100);
  }
  
  
  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï polygon
  updatePolygon() {
    if (!this.map || this.selectedPoints.length < 3) {
      // ‡∏•‡∏ö polygon ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 3 ‡∏à‡∏∏‡∏î
      if (this.map && this.currentPolygon) {
        this.map.removeLayer('polygon-layer');
        this.map.removeLayer('polygon-outline');
        this.map.removeSource('polygon-source');
        this.currentPolygon = null;
      }
      return;
    }
    
    // ‡∏•‡∏ö polygon ‡πÄ‡∏î‡∏¥‡∏°
    if (this.currentPolygon) {
      this.map.removeLayer('polygon-layer');
      this.map.removeLayer('polygon-outline');
      this.map.removeSource('polygon-source');
    }
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á polygon ‡πÉ‡∏´‡∏°‡πà
    this.map.addSource('polygon-source', {
      type: 'geojson',
      data: {
        type: 'Feature',
        properties: {},
        geometry: {
          type: 'Polygon',
          coordinates: [this.selectedPoints]
        }
      }
    });
    
    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° polygon fill (‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á)
    this.map.addLayer({
      id: 'polygon-layer',
      type: 'fill',
      source: 'polygon-source',
      paint: {
        'fill-color': '#00aaff',
        'fill-opacity': 0.2 // ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
      }
    });
    
    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° polygon outline (‡∏Å‡∏£‡∏≠‡∏ö)
    this.map.addLayer({
      id: 'polygon-outline',
      type: 'line',
      source: 'polygon-source',
      paint: {
        'line-color': '#00aaff',
        'line-width': 3, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô
        'line-dasharray': [2, 2] // ‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏£‡∏∞
      }
    });
    
    this.currentPolygon = true;
    console.log('‚úÖ Polygon updated with', this.selectedPoints.length, 'points');
  }
  
  // ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏à‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  clearMarks() {
    this.selectedPoints = [];
    this.points = [];
    
    if (this.map) {
      // ‡∏•‡∏ö markers
      const markers = document.querySelectorAll('.maplibregl-marker');
      markers.forEach(marker => marker.remove());
      
      // ‡∏•‡∏ö polygon
      if (this.currentPolygon) {
        this.map.removeLayer('polygon-layer');
        this.map.removeLayer('polygon-outline');
        this.map.removeSource('polygon-source');
        this.currentPolygon = null;
        console.log('üóëÔ∏è Polygon cleared');
      }
    }
  }
  
  // ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
  confirmArea() {
    if (this.selectedPoints.length < 3) {
      this.notificationService.showNotification('error', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏à‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà');
      return;
    }
    
    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏±‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    this.generateMeasurementPoints();
    
    this.showPopup = false;
    this.isSelectingArea = false;
    this.showMeasurementPoints = true;
    
    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î
    this.showMainMap = true;
    setTimeout(() => {
      this.initializeMap();
    }, 100);
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    const area = this.calculatePolygonArea(this.selectedPoints);
    this.locationDetail = `‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${area.toFixed(2)} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£ (${this.selectedPoints.length} ‡∏à‡∏∏‡∏î) - ‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î: ${this.measurementPoints.length} ‡∏à‡∏∏‡∏î`;
    
    console.log('‚úÖ Area confirmed:', {
      points: this.selectedPoints.length,
      area: area,
      coordinates: this.selectedPoints,
      measurementPoints: this.measurementPoints.length
    });
    console.log('üó∫Ô∏è Main map will show measurement points');
  }
  
  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏±‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
  generateMeasurementPoints() {
    if (this.selectedPoints.length < 3) return;
    
    this.measurementPoints = [];
    
    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á polygon
    const bounds = this.calculateBounds(this.selectedPoints);
    
    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏°‡∏ï‡∏£)
    const areaSize = this.calculateAreaSize(bounds);
    console.log('üìè Area size:', areaSize, 'meters');
    
    // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    let pointDistance: number;
    if (areaSize < 30) {
      // ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å (< 30m): ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á 5-10 ‡πÄ‡∏°‡∏ï‡∏£
      pointDistance = 7; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 7 ‡πÄ‡∏°‡∏ï‡∏£
      console.log('üîç Small area: using 5-10m spacing (7m)');
    } else {
      // ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà (‚â• 30m): ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á 10-15 ‡πÄ‡∏°‡∏ï‡∏£
      pointDistance = 12; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 12 ‡πÄ‡∏°‡∏ï‡∏£
      console.log('üîç Large area: using 10-15m spacing (12m)');
    }
    
    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ï‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏á‡∏®‡∏≤ (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)
    // 1 ‡∏≠‡∏á‡∏®‡∏≤ ‚âà 111,000 ‡πÄ‡∏°‡∏ï‡∏£
    const latStep = pointDistance / 111000;
    const lngStep = pointDistance / (111000 * Math.cos((bounds.minLat + bounds.maxLat) / 2 * Math.PI / 180));
    
    console.log('üìê Grid spacing - Lat:', latStep, 'Lng:', lngStep);
    
    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î‡πÅ‡∏ö‡∏ö grid pattern
    const points: [number, number][] = [];
    
    for (let lng = bounds.minLng; lng <= bounds.maxLng; lng += lngStep) {
      for (let lat = bounds.minLat; lat <= bounds.maxLat; lat += latStep) {
        const point: [number, number] = [lng, lat];
        
        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô polygon ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (this.isPointInPolygon(point, this.selectedPoints)) {
          points.push(point);
        }
      }
    }
    
    // ‚úÖ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50 ‡∏à‡∏∏‡∏î (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
    if (points.length > 50) {
      const step = Math.floor(points.length / 50);
      this.measurementPoints = points.filter((_, index) => index % step === 0).slice(0, 50);
    } else {
      this.measurementPoints = points;
    }
    
    console.log(`üéØ Generated ${this.measurementPoints.length} measurement points with ${pointDistance}m spacing`);
  }
  
  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á polygon
  calculateBounds(points: [number, number][]) {
    let minLng = points[0][0];
    let maxLng = points[0][0];
    let minLat = points[0][1];
    let maxLat = points[0][1];
    
    for (const [lng, lat] of points) {
      minLng = Math.min(minLng, lng);
      maxLng = Math.max(maxLng, lng);
      minLat = Math.min(minLat, lat);
      maxLat = Math.max(maxLat, lat);
    }
    
    return { minLng, maxLng, minLat, maxLat };
  }
  
  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏°‡∏ï‡∏£)
  calculateAreaSize(bounds: { minLng: number, maxLng: number, minLat: number, maxLat: number }) {
    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß lat ‡πÅ‡∏•‡∏∞ lng (‡πÄ‡∏°‡∏ï‡∏£)
    const latDistance = (bounds.maxLat - bounds.minLat) * 111000; // 1 ‡∏≠‡∏á‡∏®‡∏≤ ‚âà 111,000 ‡πÄ‡∏°‡∏ï‡∏£
    const lngDistance = (bounds.maxLng - bounds.minLng) * 111000 * Math.cos((bounds.minLat + bounds.maxLat) / 2 * Math.PI / 180);
    
    // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    const areaSize = Math.max(latDistance, lngDistance);
    
    console.log('üìê Area dimensions:', {
      latDistance: latDistance.toFixed(2) + 'm',
      lngDistance: lngDistance.toFixed(2) + 'm',
      areaSize: areaSize.toFixed(2) + 'm'
    });
    
    return areaSize;
  }
  
  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô polygon ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isPointInPolygon(point: [number, number], polygon: [number, number][]): boolean {
    const [x, y] = point;
    let inside = false;
    
    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
      const [xi, yi] = polygon[i];
      const [xj, yj] = polygon[j];
      
      if (((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)) {
        inside = !inside;
      }
    }
    
    return inside;
  }
  
  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà polygon
  calculatePolygonArea(coordinates: [number, number][]): number {
    if (coordinates.length < 3) return 0;
    
    let area = 0;
    const n = coordinates.length;
    
    for (let i = 0; i < n; i++) {
      const j = (i + 1) % n;
      area += coordinates[i][0] * coordinates[j][1];
      area -= coordinates[j][0] * coordinates[i][1];
    }
    
    area = Math.abs(area) / 2;
    
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å degrees ‡πÄ‡∏õ‡πá‡∏ô meters (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)
    const earthRadius = 6371000; // meters
    const lat1 = coordinates[0][1] * Math.PI / 180;
    const lat2 = coordinates[1][1] * Math.PI / 180;
    const dLat = lat2 - lat1;
    const dLng = (coordinates[1][0] - coordinates[0][0]) * Math.PI / 180;
    
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(lat1) * Math.cos(lat2) *
              Math.sin(dLng/2) * Math.sin(dLng/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    const distance = earthRadius * c;
    
    return area * (distance * distance);
  }
  
  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô popup
  initializePopupMap() {
    setTimeout(() => {
      const popupMapContainer = document.querySelector('.map-popup');
      if (!popupMapContainer) {
        console.error('‚ùå Map container not found');
        return;
      }
      
      console.log('üó∫Ô∏è Initializing popup map...');
      console.log('üó∫Ô∏è MapTiler API Key:', environment.mapTilerApiKey);
      
      // ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°
      if (this.map) {
        this.map.remove();
        this.map = undefined;
      }
      
      try {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà - ‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°
        this.map = new Map({
          container: popupMapContainer as HTMLElement,
          style: `https://api.maptiler.com/maps/satellite/style.json?key=${environment.mapTilerApiKey}`, // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏î‡∏≤‡∏ß‡πÄ‡∏ó‡∏µ‡∏¢‡∏°
          center: [103.2501379, 16.2464504], // ‚úÖ ‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°
          zoom: 17, // ‚úÖ ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ì‡∏∞
          pitch: 0,
          bearing: 0
        });
        
        console.log('üó∫Ô∏è Map created successfully');
        
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å
        this.map.on('click', (e) => {
          const { lng, lat } = e.lngLat;
          console.log(`üìç Map clicked at: [${lng}, ${lat}]`);
          console.log(`üéØ Area selection mode: ${this.isSelectingArea}`);
          
          // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏•‡∏á‡πÉ‡∏ô selectedPoints
          this.selectedPoints.push([lng, lat]);
          console.log(`üìç Added point: [${lng}, ${lat}]`);
          console.log(`üìç Total points: ${this.selectedPoints.length}`);
          
          // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
          this.points = this.selectedPoints.map((point, index) => ({
            id: index + 1,
            lng: point[0],
            lat: point[1]
          }));
          
          console.log(`üìç Updated points array:`, this.points);
          
          // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° marker
          const marker = new Marker({ 
            color: '#00aaff',
            scale: 1.2
          })
            .setLngLat([lng, lat])
            .addTo(this.map!);
          
          console.log(`üìç Marker added to map`);
          
          // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï polygon
          this.updatePolygon();
        });
        
        this.map.once('load', () => {
          console.log('‚úÖ Popup map loaded and ready for point selection');
          console.log('üìç Default location: ‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏° [103.2501379, 16.2464504]');
          console.log('üõ∞Ô∏è Map style: Satellite (‡∏î‡∏≤‡∏ß‡πÄ‡∏ó‡∏µ‡∏¢‡∏°)');
          console.log('üéØ Area selection mode:', this.isSelectingArea);
          console.log('üìç Current points:', this.selectedPoints.length);
        });
        
        this.map.on('error', (e) => {
          console.error('‚ùå Map error:', e);
        });
        
      } catch (error) {
        console.error('‚ùå Error creating map:', error);
        this.notificationService.showNotification('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key');
      }
    }, 500); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ DOM ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
  }

  goBack() {
    this.location.back();
  }
  goToProfile() {
    this.router.navigate(['/profile']);
  }
  goToContactAdmin() {
    this.router.navigate(['/reports']);
  }
  goToHistory() {
    this.router.navigate(['/history']);
  }
  
  // ‚úÖ Methods ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô
  toggleUserInfo() {
    this.showUserInfo = !this.showUserInfo;
    console.log('üë§ User info visibility:', this.showUserInfo);
  }
  
  toggleDeviceInfo() {
    this.showDeviceInfo = !this.showDeviceInfo;
    console.log('üì± Device info visibility:', this.showDeviceInfo);
  }
  
  toggleMainMap() {
    this.showMainMap = !this.showMainMap;
    console.log('üó∫Ô∏è Main map visibility:', this.showMainMap);
    
    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á
    if (this.showMainMap) {
      setTimeout(() => {
        this.initializeMap();
      }, 100);
    }
  }
  
  toggleCardMenu() {
    this.showCardMenu = !this.showCardMenu;
    console.log('üìã Card menu visibility:', this.showCardMenu);
  }
  
  closeCardMenu() {
    this.showCardMenu = false;
  }

  // ========= üîª ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ TS2339 ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà üîª =========
  private initializeMap(): void {
    if (!this.mapContainer?.nativeElement) return;

    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (this.map) {
      this.map.remove();
      this.map = undefined;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà - ‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°
    this.map = new Map({
      container: this.mapContainer.nativeElement,
      style: `https://api.maptiler.com/maps/satellite/style.json?key=${environment.mapTilerApiKey}`, // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏î‡∏≤‡∏ß‡πÄ‡∏ó‡∏µ‡∏¢‡∏°
      center: [103.2501379, 16.2464504], // ‚úÖ ‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°
      zoom: 17, // ‚úÖ ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ì‡∏∞
    });

    const bounds = new LngLatBounds();
    let hasPoint = false;

    // ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î‡πÄ‡∏î‡∏¥‡∏°
    for (const m of this.measurements) {
      if (typeof m.lng === 'number' && typeof m.lat === 'number') {
        new Marker({ color: '#ff6b6b' }).setLngLat([m.lng, m.lat]).addTo(this.map!);
        bounds.extend([m.lng, m.lat]);
        hasPoint = true;
      }
    }

    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏±‡∏î (‡∏à‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
    if (this.showMeasurementPoints && this.measurementPoints.length > 0) {
      console.log('üéØ Displaying', this.measurementPoints.length, 'measurement points on main map');
      
      for (let i = 0; i < this.measurementPoints.length; i++) {
        const [lng, lat] = this.measurementPoints[i];
        
        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á marker ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î
        const marker = new Marker({ 
          color: '#4ecdc4', // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏°
          scale: 0.8
        }).setLngLat([lng, lat]).addTo(this.map!);
        
        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° popup ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏à‡∏∏‡∏î
        marker.setPopup(new Popup({
          offset: 25,
          closeButton: false,
          closeOnClick: false
        }).setHTML(`
          <div style="text-align: center; font-weight: bold; color: #2c3e50;">
            ‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà ${i + 1}
            <br>
            <small style="color: #7f8c8d;">${lat.toFixed(6)}, ${lng.toFixed(6)}</small>
          </div>
        `));
        
        bounds.extend([lng, lat]);
        hasPoint = true;
      }
      
      console.log('‚úÖ All measurement points displayed on main map');
    }

    this.map.once('load', () => {
      if (hasPoint) {
        this.map!.fitBounds(bounds, { padding: 40, maxZoom: 17, duration: 0 });
      }
    });
  }
  // ========= üî∫ ‡∏à‡∏ö initializeMap üî∫ =========
}
