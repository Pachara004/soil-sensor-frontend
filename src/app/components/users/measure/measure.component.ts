import { CommonModule } from '@angular/common';
import {
  Component,
  OnInit,
  ViewChild,
  ElementRef,
  AfterViewInit,
  OnDestroy,
} from '@angular/core';
import { FormsModule } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { Location } from '@angular/common';
import { HttpClient } from '@angular/common/http';
import { Map, Marker, config, LngLatBounds, Popup } from '@maptiler/sdk';
import '@maptiler/sdk/dist/maptiler-sdk.css';
import { environment } from '../../../service/environment';
import { Constants } from '../../../config/constants';
import { lastValueFrom } from 'rxjs';
import { Database, ref, onValue, off } from '@angular/fire/database';
import { Auth, onAuthStateChanged } from '@angular/fire/auth';
import { NotificationService } from '../../../service/notification.service';
import { DeviceService, SelectedDeviceData } from '../../../service/device.service';
import { AuthService } from '../../../service/auth.service';
interface UserData {
  username: string;
  userID: string;
  name: string;
  email: string;
  phone: string;
  devices?: { [key: string]: boolean };
}
interface Measurement {
  deviceId: string;
  temperature: number;
  moisture: number;
  nitrogen: number;
  phosphorus: number;
  potassium: number;
  ph: number;
  lat: number;
  lng: number;
  date: string;
  timestamp: number;
  locationNameType?: 'custom' | 'auto';
  customLocationName?: string | null;
  autoLocationName?: string | null;
  areasid?: string; // ‡πÉ‡∏ä‡πâ undefined ‡πÅ‡∏ó‡∏ô null (‡∏ñ‡πâ‡∏≤‡∏à‡∏∞‡πÉ‡∏ä‡πâ null ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô: string | null)
  measurementPoint?: number;
}
interface Area {
  id: string;
  name: string;
  deviceId: string;
  username: string;
  polygonBounds: [number, number][];
  createdDate: string;
  createdTimestamp: number;
  totalMeasurements: number;
  averages?: {
    temperature: number;
    moisture: number;
    nitrogen: number;
    phosphorus: number;
    potassium: number;
    ph: number;
  };
}
// ‚úÖ Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Firebase live data
interface FirebaseLiveData {
  temperature: number;
  moisture: number;
  nitrogen: number;
  phosphorus: number;
  potassium: number;
  ph: number;
  timestamp: number;
  deviceId: string;
  status: 'online' | 'offline';
  latitude?: number;        // GPS latitude
  longitude?: number;       // GPS longitude
  isMeasuring?: boolean;    // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  currentPointIndex?: number; // ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏î
}
@Component({
  selector: 'app-measure',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './measure.component.html',
  styleUrls: ['./measure.component.scss'],
})
export class MeasureComponent implements OnInit, AfterViewInit, OnDestroy {
  customLocationName: string = '';
  areaName: string = '';
  currentAreaId: string | null = null;
  currentArea: Area | null = null;
  measurements: Measurement[] = [];
  measurementCount = 0;
  // Minimal fields used by template
  isLoading = false;
  bounds: any = null;
  temperature = 0;
  moisture = 0;
  nitrogen = 0;
  phosphorus = 0;
  potassium = 0;
  ph = 0;
  locationDetail = '';
  showPopup = false;
  points: any[] = [];
  selectedPoints: [number, number][] = [];
  isSelectingArea = false;
  currentPolygon: any = null;
  measurementPoints: [number, number][] = []; // ‚úÖ ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏±‡∏î
  showMeasurementPoints = false; // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏±‡∏î
  measuredPoints: number[] = []; // ‚úÖ ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
  currentPointIndex = 0; // ‚úÖ ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏î
  selectedPointIndex: number | null = null; // ‚úÖ ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà
  pointSelectionEnabled: boolean = true; // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î
  currentMeasuringPoint: number | null = null; // ‚úÖ ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏î
  deviceMarker: any = null; // ‚úÖ Marker ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  measurementMarkers: any[] = []; // ‚úÖ Markers ‡∏Ç‡∏≠‡∏á‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î
  // ‚úÖ Firebase live data properties
  liveData: FirebaseLiveData | null = null;
  isLiveDataConnected = false;
  liveDataSubscription: any = null;
  currentUser: any = null;
  // ‚úÖ User data properties
  userName: string = '';
  userEmail: string = '';
  userPhone: string = '';
  deviceName: string = '';
  deviceStatus: 'online' | 'offline' = 'offline';
  // ‚úÖ UI Control properties
  showUserInfo = true;  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
  showDeviceInfo = false;
  showMainMap = false;
  showCardMenu = false;
  
  // ‚úÖ Measurement status properties
  isWaitingForStable = false;
  countdownSeconds = 0;
  map: Map | undefined;
  @ViewChild('mapContainer') mapContainer!: ElementRef<HTMLElement>;
  private apiUrl: string;
  deviceId: string | null = null;
  username: string = '';
  constructor(
    private router: Router,
    private route: ActivatedRoute,
    private location: Location,
    private http: HttpClient,
    private constants: Constants,
    private database: Database,
    private auth: Auth,
    private authService: AuthService,
    private notificationService: NotificationService,
    private deviceService: DeviceService
  ) {
    this.apiUrl = this.constants.API_ENDPOINT;
    config.apiKey = environment.mapTilerApiKey;
  }
  ngOnInit(): void {
    // ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏à‡∏≤‡∏Å query parameters ‡∏´‡∏£‡∏∑‡∏≠ DeviceService
    this.route.queryParams.subscribe(params => {
      if (params['deviceId']) {
        this.deviceId = params['deviceId'];
        this.deviceName = params['deviceName'] || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
        this.deviceStatus = params['deviceStatus'] || 'offline';
        // Device data received from main page
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ query parameters ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å DeviceService
        const savedDevice = this.deviceService.getSelectedDevice();
        if (savedDevice) {
          this.deviceId = savedDevice.deviceId;
          this.deviceName = savedDevice.deviceName;
          this.deviceStatus = savedDevice.deviceStatus;
          console.log('üì± Device data loaded from DeviceService:', savedDevice);
        }
      }
      
      // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö test devices ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      const isTestDevice = this.deviceName && this.deviceName.toLowerCase().includes('test');
    });
    // ‚úÖ ‡πÉ‡∏ä‡πâ Firebase Auth ‡πÅ‡∏ó‡∏ô localStorage
    onAuthStateChanged(this.auth, (user) => {
      if (user) {
        this.currentUser = user;
        this.username = user.displayName || user.email?.split('@')[0] || '';
        // User authenticated
        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÄ‡∏™‡∏°‡∏≠ ‡πÅ‡∏•‡∏∞ device (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å main page)
        this.loadUserAndDeviceData();
        // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase live data
        this.initializeFirebaseConnection();
        // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤
        this.showPopup = true;
        this.isSelectingArea = true;
        // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô popup ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏™‡∏î‡∏á popup
        setTimeout(() => {
          this.initializePopupMap();
        }, 1000);
      } else {
        // User not authenticated, redirecting to login
        this.router.navigate(['/']);
      }
    });
  }
  async ngAfterViewInit() {
    await this.initializeMap();
    // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô popup ‡πÄ‡∏°‡∏∑‡πà‡∏≠ popup ‡πÅ‡∏™‡∏î‡∏á
    if (this.showPopup) {
      this.initializePopupMap();
    }
  }
  ngOnDestroy() {
    // Component destroying
    // ‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase Realtime Database ‡∏Å‡πà‡∏≠‡∏ô
    if (this.liveDataSubscription) {
      try {
        off(this.liveDataSubscription);
        // Firebase connection closed
      } catch (error) {
        // Error closing Firebase connection
      }
      this.liveDataSubscription = null;
    }
    // ‚úÖ ‡∏õ‡∏¥‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    if (this.map) {
      try {
        this.map.remove();
        // Map removed
      } catch (error) {
        // Error removing map
      }
      this.map = undefined;
    }
    // Component destroyed successfully
  }
  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÅ‡∏•‡∏∞ device
  async loadUserAndDeviceData() {
    if (!this.currentUser) return;
    try {
      // Loading user and device data
      // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
      this.userName = this.currentUser.displayName || this.currentUser.email?.split('@')[0] || '';
      this.userEmail = this.currentUser.email || '';
      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å backend
      const token = await this.currentUser.getIdToken();
      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÄ‡∏™‡∏°‡∏≠
      try {
        const userResponse = await lastValueFrom(
          this.http.get<any>(`${this.apiUrl}/api/auth/me`, {
            headers: { 'Authorization': `Bearer ${token}` }
          })
        );
        if (userResponse && userResponse.user) {
          const userData = userResponse.user;
          this.userName = userData.user_name || userData.username || this.userName;
          this.userEmail = userData.user_email || userData.email || this.userEmail;
          this.userPhone = userData.user_phone || userData.phone || '';
          // User data loaded from backend
        } else {
          // No user data in backend response, using Firebase data
        }
      } catch (userError) {
        // Could not load user data from backend, using Firebase data
      }
      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
      // Final user data loaded
      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• device
      try {
        const devicesResponse = await lastValueFrom(
          this.http.get<any[]>(`${this.apiUrl}/api/devices`, {
            headers: { 'Authorization': `Bearer ${token}` }
          })
        );
        if (devicesResponse && devicesResponse.length > 0) {
          // ‚úÖ ‡∏´‡∏≤ device ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö deviceId ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å main page
          let device = devicesResponse.find(d => d.deviceid?.toString() === this.deviceId) || devicesResponse[0];
          // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å backend ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å main page
          if (!this.deviceId) {
            this.deviceName = device.device_name || device.displayName || device.id || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
            this.deviceId = device.deviceid?.toString() || device.id;
          }
          // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ device ‡∏à‡∏≤‡∏Å database
          this.checkDeviceStatusFromDatabase(device);
          // Device data loaded
          // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö test devices ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
          const isTestDevice = device.device_type === false || (this.deviceName && this.deviceName.toLowerCase().includes('test'));
          if (isTestDevice) {
            // Test device detected - generating initial fake data
            setTimeout(() => {
              this.generateFakeSensorData();
            }, 1000); // ‡∏£‡∏≠ 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏´‡πâ component ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
          } else {
            // Production device detected - using real sensor data
          }
        } else {
          // No devices found for user
          if (!this.deviceId) {
            this.deviceName = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå';
          }
        }
      } catch (deviceError) {
        // Could not load device data from backend
        if (!this.deviceId) {
          this.deviceName = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå';
        }
      }
    } catch (error) {
      console.error('‚ùå Error loading user and device data:', error);
    }
  }
  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ device ‡∏à‡∏≤‡∏Å database
  checkDeviceStatusFromDatabase(device: any) {
    // ‚úÖ ‡πÉ‡∏ä‡πâ device_type ‡∏à‡∏≤‡∏Å database: false = test device (online), true = production device (offline)
    const isTestDevice = device.device_type === false;
    if (isTestDevice) {
      this.deviceStatus = 'online'; // test devices ‡πÄ‡∏õ‡πá‡∏ô online ‡πÄ‡∏™‡∏°‡∏≠
    } else {
      // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production devices ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Firebase live data
      this.checkDeviceStatusFromFirebase(device.deviceid?.toString() || device.id);
    }
  }
  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ device ‡∏à‡∏≤‡∏Å Firebase live data (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production devices)
  checkDeviceStatusFromFirebase(deviceId: string) {
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Firebase live data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production devices
    if (this.liveData && this.liveData.deviceId === deviceId) {
      this.deviceStatus = this.liveData.status || 'offline';
    } else {
      // ‚úÖ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ live data ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å timestamp
      if (this.liveData && this.liveData.timestamp) {
        const now = Date.now();
        const timeDiff = now - this.liveData.timestamp;
        const fiveMinutes = 5 * 60 * 1000; // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
        this.deviceStatus = timeDiff < fiveMinutes ? 'online' : 'offline';
      } else {
        this.deviceStatus = 'offline';
      }
    }
  }
  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ device (‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå/‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå) - legacy function
  checkDeviceStatus(deviceId: string) {
    // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö test devices ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å device name
    if (this.deviceName && this.deviceName.toLowerCase().includes('test')) {
      this.deviceStatus = 'online'; // test devices ‡πÄ‡∏õ‡πá‡∏ô online ‡πÄ‡∏™‡∏°‡∏≠
      return;
    }
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å Firebase live data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö production devices
    this.checkDeviceStatusFromFirebase(deviceId);
  }
  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö test devices ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
  generateFakeSensorData() {
    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô test device ‡∏à‡∏£‡∏¥‡∏á‡πÜ
    const isTestDevice = (this.deviceName && this.deviceName.toLowerCase().includes('test')) || 
                        (this.liveData && this.liveData.deviceId && this.liveData.deviceId.includes('test'));
    if (!isTestDevice) {
      this.notificationService.showNotification('error', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏°‡πÑ‡∏î‡πâ', '‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏±‡∏ö test devices ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      return;
    }
    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≠‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏à‡∏£‡∏¥‡∏á (‡∏à‡∏≥‡∏Å‡∏±‡∏î precision ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô numeric field overflow)
    const fakeData = {
      temperature: this.limitPrecision(this.generateRandomValue(20, 35, 1), 2), // 20-35¬∞C, 2 ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
      moisture: this.limitPrecision(this.generateRandomValue(30, 80, 1), 2), // 30-80%, 2 ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
      nitrogen: this.limitPrecision(this.generateRandomValue(10, 50, 1), 2), // 10-50 ppm, 2 ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
      phosphorus: this.limitPrecision(this.generateRandomValue(5, 30, 1), 2), // 5-30 ppm, 2 ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
      potassium: this.limitPrecision(this.generateRandomValue(8, 40, 1), 2), // 8-40 ppm, 2 ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
      ph: this.limitPrecision(this.generateRandomValue(5.5, 7.5, 2), 2), // 5.5-7.5, 2 ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
      lat: this.roundLatLng(this.generateRandomValue(16.0, 16.5, 6), 6), // ‚úÖ ‡∏à‡∏≥‡∏Å‡∏±‡∏î precision lat ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö database constraint
      lng: this.roundLatLng(this.generateRandomValue(103.0, 103.5, 6), 6), // ‚úÖ ‡∏à‡∏≥‡∏Å‡∏±‡∏î precision lng ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö database constraint
      timestamp: Date.now()
    };
    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï liveData ‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≠‡∏°
    this.liveData = {
      ...this.liveData,
      ...fakeData,
      deviceId: this.deviceId || 'test-device',
      status: 'online' as 'online' | 'offline'
    };
    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï measurement values
    this.temperature = fakeData.temperature;
    this.moisture = fakeData.moisture;
    this.nitrogen = fakeData.nitrogen;
    this.phosphorus = fakeData.phosphorus;
    this.potassium = fakeData.potassium;
    this.ph = fakeData.ph;
  }
  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡πà‡∏°
  generateRandomValue(min: number, max: number, decimals: number = 0): number {
    const value = Math.random() * (max - min) + min;
    return Number(value.toFixed(decimals));
  }
  // ‚úÖ ‡∏à‡∏≥‡∏Å‡∏±‡∏î precision ‡∏Ç‡∏≠‡∏á lat/lng ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô numeric field overflow
  limitPrecision(value: number, decimals: number = 6): number {
    return Number(value.toFixed(decimals));
  }
  // ‚úÖ Special function for lat/lng with precision 10, scale 8 (max 2 integer digits)
  roundLatLng(value: number, decimals: number = 6): number {
    if (value === null || value === undefined) return 0;
    // For precision 10, scale 8: max value is 99.99999999
    const maxValue = 99.99999999;
    const rounded = Math.round(value * Math.pow(10, decimals)) / Math.pow(10, decimals);
    return Math.min(Math.max(rounded, -maxValue), maxValue);
  }
  
  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ESP32 ‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  addESP32MarkerToMap(lat: number, lng: number, pointNumber: number, measurementData: any) {
    if (!this.map) {
      console.error('‚ùå Map not initialized');
      return;
    }
    
    console.log(`üìç Adding ESP32 marker for point ${pointNumber} at:`, { lat, lng });
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á popup HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î
    const popupHTML = `
      <div class="esp32-marker-popup">
        <h4 class="popup-title">üìç ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà ${pointNumber}</h4>
        <div class="popup-subtitle">üõ∞Ô∏è ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á GPS ‡∏à‡∏≤‡∏Å ESP32</div>
        <div class="popup-content">
          <div class="popup-section">
            <div class="popup-label">üìç ‡∏û‡∏¥‡∏Å‡∏±‡∏î GPS:</div>
            <div class="popup-value">
              <strong>Lat:</strong> ${lat.toFixed(8)}<br>
              <strong>Lng:</strong> ${lng.toFixed(8)}
            </div>
          </div>
          <div class="popup-section">
            <div class="popup-label">üå°Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î:</div>
            <div class="popup-value">
              <strong>‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥:</strong> ${measurementData.temperature?.toFixed(1) || 'N/A'}¬∞C<br>
              <strong>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô:</strong> ${measurementData.moisture?.toFixed(1) || 'N/A'}%<br>
              <strong>pH:</strong> ${measurementData.ph?.toFixed(2) || 'N/A'}
            </div>
          </div>
          <div class="popup-section">
            <div class="popup-label">üå± ‡∏ò‡∏≤‡∏ï‡∏∏‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏û‡∏∑‡∏ä:</div>
            <div class="popup-value">
              <strong>N:</strong> ${measurementData.nitrogen?.toFixed(0) || 'N/A'} mg/kg<br>
              <strong>P:</strong> ${measurementData.phosphorus?.toFixed(0) || 'N/A'} mg/kg<br>
              <strong>K:</strong> ${measurementData.potassium?.toFixed(0) || 'N/A'} mg/kg
            </div>
          </div>
          <div class="popup-footer">
            <small>‚è±Ô∏è ${new Date().toLocaleString('th-TH')}</small>
          </div>
        </div>
      </div>
    `;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á marker element
    const markerEl = document.createElement('div');
    markerEl.className = 'esp32-marker';
    markerEl.innerHTML = `
      <div class="marker-icon">
        <svg width="40" height="40" viewBox="0 0 40 40">
          <circle cx="20" cy="20" r="18" fill="#4CAF50" stroke="#fff" stroke-width="3"/>
          <text x="20" y="26" text-anchor="middle" fill="#fff" font-size="16" font-weight="bold">${pointNumber}</text>
        </svg>
      </div>
    `;
    
    // ‡πÄ‡∏û‡∏¥‡πà‡∏° animation
    markerEl.style.animation = 'marker-bounce 0.6s ease-out';
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á marker
    const marker = new Marker({ element: markerEl })
      .setLngLat([lng, lat])
      .setPopup(new Popup({ offset: 25 }).setHTML(popupHTML))
      .addTo(this.map);
    
    // ‡πÄ‡∏Å‡πá‡∏ö marker ‡πÑ‡∏ß‡πâ‡πÉ‡∏ô array
    this.measurementMarkers.push(marker);
    
    console.log(`‚úÖ ESP32 marker added for point ${pointNumber}`);
    
    // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö map view ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô marker ‡πÉ‡∏´‡∏°‡πà
    this.map.flyTo({
      center: [lng, lat],
      zoom: 17,
      duration: 1500,
      essential: true
    });
  }
  
  // ‚úÖ ‡∏•‡∏ö markers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  clearESP32Markers() {
    if (this.measurementMarkers && this.measurementMarkers.length > 0) {
      console.log(`üóëÔ∏è Removing ${this.measurementMarkers.length} ESP32 markers`);
      this.measurementMarkers.forEach(marker => marker.remove());
      this.measurementMarkers = [];
    }
  }
  
  // ‚úÖ ‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å ESP32 ‡∏ú‡πà‡∏≤‡∏ô Firebase
  async waitForESP32Measurement(pointNumber: number): Promise<any> {
    const timeout = 300000; // 5 minutes timeout
    const pollInterval = 2000; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    const startTime = Date.now();
    
    console.log(`‚è≥ Waiting for ESP32 measurement at point ${pointNumber}...`);
    
    return new Promise((resolve) => {
      const checkInterval = setInterval(async () => {
        const elapsedTime = Date.now() - startTime;
        
        // Check timeout
        if (elapsedTime > timeout) {
          console.error(`‚ùå Timeout waiting for ESP32 measurement at point ${pointNumber}`);
          clearInterval(checkInterval);
          resolve(null);
          return;
        }
        
        try {
          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Firebase /measurements/{deviceId}
          const token = await this.currentUser.getIdToken();
          const response: any = await lastValueFrom(
            this.http.get(`${this.apiUrl}/api/realtime/live-measurements/${this.deviceId}`, {
              headers: {
                'Authorization': `Bearer ${token}`
              }
            })
          );
          
          console.log(`üìä Firebase data check for point ${pointNumber}:`, response);
          
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ESP32 ‡∏ß‡∏±‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á (finished = true)
          if (response && response.finished === true) {
            console.log(`‚úÖ ESP32 finished measuring point ${pointNumber}`);
            clearInterval(checkInterval);
            resolve(response);
            return;
          }
          
          // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
          const progress = response?.progress || 0;
          console.log(`üìà Measurement progress for point ${pointNumber}: ${progress}%`);
          
        } catch (error: any) {
          console.error(`‚ùå Error checking Firebase for point ${pointNumber}:`, error);
          // ‡πÑ‡∏°‡πà resolve ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        }
      }, pollInterval);
    });
  }
  
  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Firebase
  initializeFirebaseConnection() {
    if (!this.currentUser) {
      console.error('‚ùå No current user for Firebase connection');
      return;
    }
    
    // ‚úÖ ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (this.liveDataSubscription) {
      try {
        off(this.liveDataSubscription);
      } catch (error) {
        console.error('‚ùå Error unsubscribing from Firebase:', error);
      }
      this.liveDataSubscription = null;
    }
    
    // ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Firebase Realtime Database - ‡πÉ‡∏ä‡πâ device-specific path
    if (this.deviceId) {
      console.log('üîó Connecting to Firebase for device:', this.deviceId);
      
      // ‡∏•‡∏≠‡∏á‡∏´‡∏•‡∏≤‡∏¢ path ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ ‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á measurement
      const possiblePaths = [
        `live/${this.deviceId}`,
        `live/esp32-soil-${this.deviceId}`,
        `live/esp32-soil-001`,
        `devices/${this.deviceId}`,
        `Devices/${this.deviceId}`,
        `measurement/${this.deviceId}`,
        `measurements/${this.deviceId}`,
        `live`,
        `devices`,
        `Devices`,
        `measurement`,
        `measurements`
      ];
      
      // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö path ‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      this.tryConnectToFirebasePaths(possiblePaths, 0);
    } else {
      console.log('‚ö†Ô∏è No deviceId available for Firebase connection');
      // ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö path ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      this.tryConnectToFirebasePaths(['live', 'devices', 'Devices', 'measurement', 'measurements'], 0);
    }
  }
  
  // ‚úÖ ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Firebase paths ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß
  private tryConnectToFirebasePaths(paths: string[], index: number) {
    if (index >= paths.length) {
      console.log('‚ùå All Firebase paths failed');
      this.isLiveDataConnected = false;
      return;
    }
    
    const currentPath = paths[index];
    console.log(`üîÑ Trying Firebase path: ${currentPath}`);
    
    const liveDataRef = ref(this.database, currentPath);
    this.liveDataSubscription = onValue(liveDataRef, (snapshot) => {
      try {
        const data = snapshot.val();
        console.log(`üìä Firebase data from ${currentPath}:`, data);
        
        if (data) {
          // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô object ‡∏ó‡∏µ‡πà‡∏°‡∏µ deviceId ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß ‡πÉ‡∏´‡πâ‡∏´‡∏≤ device ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
          if (typeof data === 'object' && !data.deviceId) {
            // ‡∏´‡∏≤ device ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö deviceId ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            const deviceData = this.findDeviceDataInFirebase(data, this.deviceId!);
            if (deviceData) {
              this.liveData = deviceData;
              this.isLiveDataConnected = true;
              this.updateMeasurementValues(deviceData);
              console.log('‚úÖ Found device data in Firebase:', deviceData);
              return;
            }
            
            // ‚úÖ ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• measurement ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            const latestMeasurement = this.findLatestMeasurement(data, this.deviceId!);
            if (latestMeasurement) {
              this.liveData = latestMeasurement;
              this.isLiveDataConnected = true;
              this.updateMeasurementValues(latestMeasurement);
              console.log('‚úÖ Found latest measurement in Firebase:', latestMeasurement);
              return;
            }
          } else if (data.deviceId === this.deviceId || !this.deviceId) {
            // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö device ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ deviceId
            this.liveData = data;
            this.isLiveDataConnected = true;
            this.updateMeasurementValues(data);
            console.log('‚úÖ Connected to Firebase successfully:', data);
            return;
          }
        }
        
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏•‡∏≠‡∏á path ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        this.tryConnectToFirebasePaths(paths, index + 1);
        
      } catch (error) {
        console.error(`‚ùå Error processing Firebase data from ${currentPath}:`, error);
        this.tryConnectToFirebasePaths(paths, index + 1);
      }
    }, (error) => {
      console.error(`‚ùå Firebase connection error for ${currentPath}:`, error);
      this.tryConnectToFirebasePaths(paths, index + 1);
    });
  }
  
  // ‚úÖ ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• device ‡πÉ‡∏ô Firebase data
  private findDeviceDataInFirebase(firebaseData: any, deviceId: string): any {
    console.log('üîç Searching for device data in Firebase:', firebaseData);
    console.log('üîç Looking for deviceId:', deviceId);
    
    // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    const possibleKeys = [
      deviceId,
      `device_${deviceId}`,
      `esp32_${deviceId}`,
      `soil_${deviceId}`,
      `esp32-soil-${deviceId}`,
      `device_${deviceId}`,
      `Device_${deviceId}`,
      'esp32-soil-001'  // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö live data
    ];
    
    for (const key of possibleKeys) {
      if (firebaseData[key]) {
        console.log(`‚úÖ Found device data with key: ${key}`);
        return firebaseData[key];
      }
    }
    
    // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ô array ‡∏´‡∏£‡∏∑‡∏≠ object ‡∏ó‡∏µ‡πà‡∏°‡∏µ deviceId
    for (const key in firebaseData) {
      const item = firebaseData[key];
      if (item && typeof item === 'object') {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏≤‡∏¢ field ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô deviceId
        const deviceFields = ['deviceId', 'device_id', 'deviceid', 'id', 'device_name'];
        
        for (const field of deviceFields) {
          if (item[field] === deviceId || item[field] === parseInt(deviceId)) {
            console.log(`‚úÖ Found device data in object with key: ${key}, field: ${field}`);
            return item;
          }
        }
        
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô device name ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (item.device_name && item.device_name.includes(deviceId)) {
          console.log(`‚úÖ Found device data by name with key: ${key}`);
          return item;
        }
        
        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö esp32-soil-001 ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        if (item.deviceId === 'esp32-soil-001' || item.deviceName === 'esp32-soil-001') {
          console.log(`‚úÖ Found esp32-soil-001 data with key: ${key}`);
          return item;
        }
      }
    }
    
    console.log('‚ùå No device data found in Firebase');
    return null;
  }
  
  // ‚úÖ ‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• measurement ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô Firebase
  private findLatestMeasurement(firebaseData: any, deviceId: string): any {
    console.log('üîç Searching for latest measurement in Firebase:', firebaseData);
    console.log('üîç Looking for deviceId:', deviceId);
    
    let latestMeasurement = null;
    let latestTimestamp = 0;
    
    // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
    for (const key in firebaseData) {
      const item = firebaseData[key];
      if (item && typeof item === 'object') {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô measurement ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (item.deviceid === parseInt(deviceId) || item.deviceId === deviceId || item.device_id === deviceId) {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö timestamp
          const timestamp = item.timestamp || item.created_at || item.updated_at || 0;
          if (timestamp > latestTimestamp) {
            latestTimestamp = timestamp;
            latestMeasurement = item;
            console.log(`‚úÖ Found measurement with timestamp: ${timestamp}`);
          }
        }
        
        // ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡πÉ‡∏ô nested object
        if (item.measurements && Array.isArray(item.measurements)) {
          for (const measurement of item.measurements) {
            if (measurement.deviceid === parseInt(deviceId) || measurement.deviceId === deviceId) {
              const timestamp = measurement.timestamp || measurement.created_at || measurement.updated_at || 0;
              if (timestamp > latestTimestamp) {
                latestTimestamp = timestamp;
                latestMeasurement = measurement;
                console.log(`‚úÖ Found measurement in array with timestamp: ${timestamp}`);
              }
            }
          }
        }
      }
    }
    
    if (latestMeasurement) {
      console.log('‚úÖ Found latest measurement:', latestMeasurement);
    } else {
      console.log('‚ùå No measurement found in Firebase');
    }
    
    return latestMeasurement;
  }
  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÉ‡∏ô UI
  updateMeasurementValues(data: FirebaseLiveData) {
    console.log('üîÑ Updating measurement values:', data);
    
    this.temperature = data.temperature || 0;
    this.moisture = data.moisture || 0;
    this.nitrogen = data.nitrogen || 0;
    this.phosphorus = data.phosphorus || 0;
    this.potassium = data.potassium || 0;
    this.ph = data.ph || 0;
    
    console.log('üìä Updated values:', {
      temperature: this.temperature,
      moisture: this.moisture,
      nitrogen: this.nitrogen,
      phosphorus: this.phosphorus,
      potassium: this.potassium,
      ph: this.ph
    });
    
    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
    if (data.latitude && data.longitude) {
      this.updateDevicePosition(data);
      this.checkMeasurementProximity(data);
    }
    
    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ device
    if (this.deviceId) {
      this.checkDeviceStatus(this.deviceId);
    }
  }
  
  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
  updateDevicePosition(data: FirebaseLiveData) {
    if (!this.map) return;
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á/‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï marker ‡∏Ç‡∏≠‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
    if (this.deviceMarker) {
      this.deviceMarker.setLngLat([data.longitude!, data.latitude!]);
    } else {
      this.deviceMarker = new Marker({ color: 'red' })
        .setLngLat([data.longitude!, data.latitude!])
        .setPopup(new Popup().setHTML(`
          <div class="device-popup">
            <h3>‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå: ${data.deviceId}</h3>
            <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${data.status}</p>
            <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏î: ${data.isMeasuring ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà'}</p>
            <p>‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á: ${data.latitude?.toFixed(6)}, ${data.longitude?.toFixed(6)}</p>
          </div>
        `))
        .addTo(this.map!);
    }
  }
  
  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏¢‡∏∞‡πÉ‡∏Å‡∏•‡πâ‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î
  checkMeasurementProximity(deviceData: FirebaseLiveData) {
    if (!deviceData.latitude || !deviceData.longitude) return;
    
    const deviceLat = deviceData.latitude;
    const deviceLng = deviceData.longitude;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ß‡∏±‡∏î
    for (let i = 0; i < this.measurementPoints.length; i++) {
      if (this.measuredPoints.includes(i)) continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
      
      const [pointLng, pointLat] = this.measurementPoints[i];
      const distance = this.calculateDistance(deviceLat, deviceLng, pointLat, pointLng);
      
      // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞ 2-3 ‡πÄ‡∏°‡∏ï‡∏£
      if (distance <= 3) {
        this.triggerMeasurementPoint(i, distance);
        break;
      }
    }
  }
  
  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î
  calculateDistance(lat1: number, lng1: number, lat2: number, lng2: number): number {
    const R = 6371000; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÇ‡∏•‡∏Å (‡πÄ‡∏°‡∏ï‡∏£)
    const dLat = (lat2 - lat1) * Math.PI / 180;
    const dLng = (lng2 - lng1) * Math.PI / 180;
    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
              Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *
              Math.sin(dLng/2) * Math.sin(dLng/2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return R * c; // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÉ‡∏ô‡πÄ‡∏°‡∏ï‡∏£
  }
  
  // ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î
  async triggerMeasurementPoint(pointIndex: number, distance: number) {
    // ‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î Buzzer
    await this.sendBuzzerCommand(pointIndex, distance);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠
    this.notificationService.showNotification(
      'info', 
      'üéØ ‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß!', 
      `‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏¢‡∏π‡πà‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î ${pointIndex + 1} ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ${distance.toFixed(1)} ‡πÄ‡∏°‡∏ï‡∏£\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏ö Sensor ‡πÅ‡∏•‡∏∞‡∏Å‡∏î‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå`
    );
    
    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ß‡∏±‡∏î)
    this.updateMeasurementPointColor(pointIndex, 'yellow');
  }
  
  // ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á Buzzer ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
  async sendBuzzerCommand(pointIndex: number, distance: number) {
    try {
      const command = {
        deviceId: this.deviceId,
        action: 'buzzer',
        pointIndex: pointIndex,
        distance: distance,
        timestamp: Date.now()
      };
      
      // ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏ú‡πà‡∏≤‡∏ô Firebase
      const { set, ref } = await import('@angular/fire/database');
      await set(ref(this.database, `commands/${this.deviceId}`), command);
    } catch (error) {
      console.error('Error sending buzzer command:', error);
    }
  }
  
  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î
  updateMeasurementPointColor(pointIndex: number, color: string) {
    if (this.measurementMarkers[pointIndex]) {
      this.measurementMarkers[pointIndex].setColor(color);
    }
  }
  
  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡πà‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ì
  async onDeviceStartMeasurement() {
    if (!this.currentUser) return;
    
    try {
      const token = await this.currentUser.getIdToken();
      const measurementStart = {
        deviceId: this.deviceId,
        action: 'start_measurement',
        pointIndex: this.currentPointIndex,
        timestamp: Date.now()
      };
      
      // ‡∏™‡πà‡∏á‡πÑ‡∏õ Firebase
      const { set, ref } = await import('@angular/fire/database');
      await set(ref(this.database, `measurements/${this.deviceId}/current`), measurementStart);
      
      // ‡πÅ‡∏™‡∏î‡∏á loading
      this.isLoading = true;
    } catch (error) {
      console.error('Error starting measurement:', error);
    }
  }
  
  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏™‡πà‡∏á‡∏°‡∏≤
  async saveMeasurementData(deviceData: FirebaseLiveData) {
    if (!this.currentUser) return;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö currentAreaId
    if (!this.currentAreaId) {
      console.error('‚ùå No currentAreaId available for real device measurement');
      this.notificationService.showNotification('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö Area ID ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà');
      return;
    }
    
    try {
      const token = await this.currentUser.getIdToken();
      // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å measurementPoints (‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å MapTiler)
      const currentPoint = this.measurementPoints[this.currentPointIndex];
      
      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å MapTiler ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
      const realLng = currentPoint ? parseFloat(currentPoint[0].toFixed(8)) : (deviceData.longitude || 0);
      const realLat = currentPoint ? parseFloat(currentPoint[1].toFixed(8)) : (deviceData.latitude || 0);
      
      console.log('üó∫Ô∏è MapTiler real coordinates for device measurement:', {
        currentPoint: currentPoint,
        original_lng: currentPoint ? currentPoint[0] : deviceData.longitude,
        original_lat: currentPoint ? currentPoint[1] : deviceData.latitude,
        real_lng: realLng,
        real_lat: realLat,
        precision: '8 decimal places',
        accuracy: '~0.00111 mm'
      });
      
      const measurementData: Measurement = {
        deviceId: deviceData.deviceId,
        temperature: deviceData.temperature,
        moisture: deviceData.moisture,
        nitrogen: deviceData.nitrogen,
        phosphorus: deviceData.phosphorus,
        potassium: deviceData.potassium,
        ph: deviceData.ph,
        lat: realLat, // ‚úÖ ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å MapTiler (precision 8)
        lng: realLng, // ‚úÖ ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å MapTiler (precision 8)
        date: new Date(deviceData.timestamp).toISOString(),
        areasid: this.currentAreaId || undefined,
        measurementPoint: this.currentPointIndex + 1,
        timestamp: deviceData.timestamp
      };
      
      console.log('üîç Real device measurement data:', measurementData);
      console.log('üîç Current areaId:', this.currentAreaId);
      console.log('üîç Current measurement point:', currentPoint);
      console.log('üîç Current measurement point index:', this.currentPointIndex);
      console.log('üîç Measurement lat/lng:', {lat: measurementData.lat, lng: measurementData.lng});
      
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô PostgreSQL
      await this.saveSingleMeasurement(token, measurementData);
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏î‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à
      const remainingCount = this.measurementPoints.length - (this.currentPointIndex + 1);
      const progressPercentage = Math.round(((this.currentPointIndex + 1) / this.measurementPoints.length) * 100);
      
      this.notificationService.showNotification(
        'success', 
        '‚úÖ ‡∏ß‡∏±‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!', 
        `‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà ${this.currentPointIndex + 1} ‡∏ß‡∏±‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß\nAreas ID: ${this.currentAreaId}\n\nüìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: ${progressPercentage}%\n‚úÖ ‡∏ß‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß: ${this.currentPointIndex + 1}/${this.measurementPoints.length} ‡∏à‡∏∏‡∏î\n‚è≥ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å: ${remainingCount} ‡∏à‡∏∏‡∏î`
      );
      
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
      this.markPointAsMeasured(this.currentPointIndex);
      this.currentPointIndex++;
      
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ß‡∏±‡∏î‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (this.currentPointIndex >= this.measurementPoints.length) {
        this.showMeasurementComplete();
      }
    } catch (error) {
      console.error('Error saving measurement data:', error);
    }
  }
  
  // ‚úÖ ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
  markPointAsMeasured(pointIndex: number) {
    this.measuredPoints.push(pointIndex);
    this.updateMeasurementPoints();
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
    const totalPoints = this.measurementPoints.length;
    const measuredCount = this.measuredPoints.length;
    const remainingCount = totalPoints - measuredCount;
    const progressPercentage = Math.round((measuredCount / totalPoints) * 100);
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
    this.notificationService.showNotification(
      'success', 
      '‚úÖ ‡∏ß‡∏±‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!', 
      `‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà ${pointIndex + 1} ‡∏ß‡∏±‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß\n\nüìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: ${progressPercentage}%\n‚úÖ ‡∏ß‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß: ${measuredCount}/${totalPoints} ‡∏à‡∏∏‡∏î\n‚è≥ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å: ${remainingCount} ‡∏à‡∏∏‡∏î`
    );
  }
  
  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î
  updateMeasurementPoints() {
    if (!this.map) return;
    
    // ‡∏•‡∏ö markers ‡πÄ‡∏î‡∏¥‡∏°
    this.measurementMarkers.forEach(marker => marker.remove());
    this.measurementMarkers = [];
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á markers ‡πÉ‡∏´‡∏°‡πà
    this.measurementPoints.forEach((point, index) => {
      const [lng, lat] = point;
      const isMeasured = this.measuredPoints.includes(index);
      const isCurrent = index === this.currentPointIndex;
      
      let color = 'blue'; // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ß‡∏±‡∏î
      if (isMeasured) color = 'green'; // ‡∏ß‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
      if (isCurrent) color = 'yellow'; // ‡∏à‡∏∏‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      
      const marker = new Marker({ color })
        .setLngLat([lng, lat])
        .setPopup(new Popup().setHTML(`
          <div class="measurement-point-popup">
            <h3>‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà ${index + 1}</h3>
            <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ${isMeasured ? '‡∏ß‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß' : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ß‡∏±‡∏î'}</p>
            ${isMeasured ? this.getMeasurementDataHTML(index) : ''}
          </div>
        `))
        .addTo(this.map!);
      
      this.measurementMarkers.push(marker);
    });
  }
  
  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î
  getMeasurementDataHTML(pointIndex: number): string {
    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å measurements array
    const measurement = this.measurements.find(m => m.measurementPoint === pointIndex + 1);
    if (!measurement) return '';
    
    return `
      <div class="measurement-data">
        <p>üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${measurement.temperature}¬∞C</p>
        <p>üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${measurement.moisture}%</p>
        <p>üå± ‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô: ${measurement.nitrogen} ppm</p>
        <p>üåø ‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™: ${measurement.phosphorus} ppm</p>
        <p>üçÉ ‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°: ${measurement.potassium} ppm</p>
        <p>‚öóÔ∏è pH: ${measurement.ph}</p>
      </div>
    `;
  }
  
  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
  showMeasurementComplete() {
    this.isLoading = false;
    
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    const totalPoints = this.measurementPoints.length;
    const measuredCount = this.measuredPoints.length;
    const successRate = Math.round((measuredCount / totalPoints) * 100);
    
    this.notificationService.showNotification(
      'success', 
      'üéâ ‡∏ß‡∏±‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!', 
      `‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!\n\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:\n‚úÖ ‡∏ß‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${measuredCount}/${totalPoints} ‡∏à‡∏∏‡∏î\nüìà ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successRate}%\n\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ History...`
    );
    
    setTimeout(() => {
      this.router.navigate(['/history']);
    }, 3000);
  }
  
  async loadMeasurements(deviceId: string) {
    try {
      const response = await lastValueFrom(
        this.http.get<Measurement[]>(
          `${this.apiUrl}/api/measurements?deviceId=${deviceId}`
        )
      );
      this.measurements = response || [];
      this.measurementCount = this.measurements.length;
      await this.initializeMap();
    } catch (error) {
      console.error('Error loading measurements:', error);
      this.notificationService.showNotification('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    }
  }
  async saveMeasurement() {
    if (this.isLoading) return;
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö device status
    if (!this.deviceId) {
      this.notificationService.showNotification('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      return;
    }
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö live data
    if (!this.liveData) {
      this.notificationService.showNotification('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
      return;
    }
    
    if (!this.currentUser) {
      console.error('‚ùå No current user found');
      this.notificationService.showNotification('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ', '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
      return;
    }
    
    this.isLoading = true;
    
    try {
      const token = await this.currentUser.getIdToken();
      if (!token) {
        console.error('‚ùå Failed to get Firebase token');
        this.notificationService.showNotification('error', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö Token', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö Token ‡∏à‡∏≤‡∏Å Firebase ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
        return;
      }
      
      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î
      this.notificationService.showNotification(
        'info', 
        '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤', 
        '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà 2-3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ...'
      );
      
      // ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà 2-3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      await this.waitForStableValues();
      
      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Firebase live ‡∏•‡∏á PostgreSQL
      await this.saveCurrentLiveDataToPostgreSQL(token);
      
    } catch (error: any) {
      console.error('‚ùå Error saving measurement:', error);
      console.error('‚ùå Error details:', {
        status: error.status,
        statusText: error.statusText,
        message: error.message,
        error: error.error
      });
      
      if (error.status === 400) {
        console.error('‚ùå Bad Request - Validation Error:', error.error);
        this.notificationService.showNotification('error', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${error.error?.message || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å'}`);
      } else if (error.status === 401) {
        console.error('‚ùå Unauthorized - Token Error:', error.error);
        this.notificationService.showNotification('error', '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
      } else if (error.status === 404) {
        console.error('‚ùå Not Found - API Endpoint Error:', error.error);
        this.notificationService.showNotification('error', '‡πÑ‡∏°‡πà‡∏û‡∏ö API', '‡πÑ‡∏°‡πà‡∏û‡∏ö API endpoint ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤');
      } else if (error.status === 500) {
        console.error('‚ùå Server Error:', error.error);
        this.notificationService.showNotification('error', '‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      } else {
        console.error('‚ùå Unknown Error:', error);
        this.notificationService.showNotification('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å: ${error.message || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á'}`);
      }
    } finally {
      this.isLoading = false;
    }
  }
  
  // ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
  selectPoint(pointIndex: number) {
    if (pointIndex < 0 || pointIndex >= this.measurementPoints.length) {
      return;
    }
    
    this.selectedPointIndex = pointIndex;
    console.log(`üìç Selected point ${pointIndex + 1}:`, this.measurementPoints[pointIndex]);
    
    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏Ç‡∏≠‡∏á marker ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    this.updateMarkerColors();
  }
  
  // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  private async loadCompletedMeasurements() {
    if (!this.currentAreaId || !this.deviceId) {
      console.log('‚ö†Ô∏è No areaId or deviceId available for loading measurements');
      return;
    }
    
    try {
      const token = await this.auth.currentUser?.getIdToken();
      if (!token) {
        console.log('‚ö†Ô∏è No token available for loading measurements');
        return;
      }
      
      // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const response = await lastValueFrom(
        this.http.get<any[]>(`${this.apiUrl}/api/measurements?areaid=${this.currentAreaId}&deviceid=${this.deviceId}`, {
          headers: { 'Authorization': `Bearer ${token}` }
        })
      );
      
      if (response && Array.isArray(response)) {
        console.log('üìä Loaded measurements from database:', response.length);
        
        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏∏‡∏î‡πÑ‡∏´‡∏ô‡∏ß‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÇ‡∏î‡∏¢‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î
        const measuredIndices: number[] = [];
        
        for (let i = 0; i < this.measurementPoints.length; i++) {
          const [pointLng, pointLat] = this.measurementPoints[i];
          
          // ‚úÖ ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ
          const matchingMeasurement = response.find(measurement => {
            const measurementLat = parseFloat(measurement.lat);
            const measurementLng = parseFloat(measurement.lng);
            
            // ‚úÖ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î (‡πÉ‡∏ä‡πâ tolerance 0.0001)
            const latDiff = Math.abs(pointLat - measurementLat);
            const lngDiff = Math.abs(pointLng - measurementLng);
            
            return latDiff < 0.0001 && lngDiff < 0.0001;
          });
          
          if (matchingMeasurement) {
            measuredIndices.push(i);
            console.log(`‚úÖ Point ${i + 1} has been measured (${matchingMeasurement.lat}, ${matchingMeasurement.lng})`);
          }
        }
        
        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï measuredPoints
        this.measuredPoints = measuredIndices;
        console.log('‚úÖ Updated measuredPoints:', this.measuredPoints);
      }
    } catch (error) {
      console.error('‚ùå Error loading completed measurements:', error);
    }
  }
  
  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏Ç‡∏≠‡∏á marker ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  private updateMarkerColors() {
    if (!this.map) return;
    
    console.log('üé® Updating marker colors...');
    console.log('üìç Selected point index:', this.selectedPointIndex);
    console.log('‚úÖ Measured points:', this.measuredPoints);
    
    // ‚úÖ ‡∏´‡∏≤ markers ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ
    const markers = this.map.getContainer().querySelectorAll('.maplibregl-marker');
    console.log('üîç Found markers:', markers.length);
    
    markers.forEach((markerElement: any, index: number) => {
      if (index < this.measurementPoints.length) {
        const isMeasured = this.measuredPoints.includes(index);
        const isSelected = this.selectedPointIndex === index;
        
        // ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        let color = '#6c757d'; // ‡πÄ‡∏ó‡∏≤ - ‡∏õ‡∏Å‡∏ï‡∏¥
        if (isSelected) {
          color = '#dc3545'; // ‡πÅ‡∏î‡∏á - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà
        } else if (isMeasured) {
          color = '#28a745'; // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß - ‡∏ß‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
        }
        
        console.log(`üé® Marker ${index + 1}: selected=${isSelected}, measured=${isMeasured}, color=${color}`);
        
        // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏Ç‡∏≠‡∏á marker
        const markerIcon = markerElement.querySelector('svg');
        if (markerIcon) {
          markerIcon.style.fill = color;
          console.log(`‚úÖ Updated marker ${index + 1} color to ${color}`);
        } else {
          console.log(`‚ùå No SVG found for marker ${index + 1}`);
        }
      }
    });
  }
  
  // ‚úÖ ‡∏ß‡∏±‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  async measureSelectedPoint() {
    if (this.selectedPointIndex === null) {
      this.notificationService.showNotification('warning', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }
    
    if (this.measuredPoints.includes(this.selectedPointIndex)) {
      this.notificationService.showNotification('info', '‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡∏ß‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß', '‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß');
      return;
    }
    
    try {
      this.isLoading = true;
      this.currentMeasuringPoint = this.selectedPointIndex;
      
      const token = await this.auth.currentUser?.getIdToken();
      if (!token) {
        throw new Error('No authentication token');
      }
      
      console.log(`üéØ Measuring selected point ${this.selectedPointIndex + 1}`);
      
      // ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà 2-3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      await this.waitForStableValues();
      
      // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Firebase live ‡∏•‡∏á PostgreSQL
      await this.saveCurrentLiveDataToPostgreSQL(token);
      
      // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
      this.measuredPoints.push(this.selectedPointIndex);
      
      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏Ç‡∏≠‡∏á marker ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      this.updateMarkerColors();
      
      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      const [lng, lat] = this.measurementPoints[this.selectedPointIndex];
      this.notificationService.showNotification(
        'success',
        '‡∏ß‡∏±‡∏î‡∏à‡∏∏‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        `‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà ${this.selectedPointIndex + 1} ‡∏ß‡∏±‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß\n‡∏û‡∏¥‡∏Å‡∏±‡∏î: ${lat.toFixed(6)}, ${lng.toFixed(6)}`
      );
      
      // ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      this.selectNextAvailablePoint();
      
    } catch (error: any) {
      console.error('‚ùå Error measuring selected point:', error);
      this.notificationService.showNotification('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏à‡∏∏‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    } finally {
      this.isLoading = false;
      this.currentMeasuringPoint = null;
    }
  }
  
  // ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ß‡∏±‡∏î
  private selectNextAvailablePoint() {
    for (let i = 0; i < this.measurementPoints.length; i++) {
      if (!this.measuredPoints.includes(i)) {
        this.selectPoint(i);
        return;
      }
    }
    
    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏ß‡∏±‡∏î‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß
    if (this.measuredPoints.length === this.measurementPoints.length) {
      this.notificationService.showNotification(
        'success',
        '‡∏ß‡∏±‡∏î‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß',
        `‡∏ß‡∏±‡∏î‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏à‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß (${this.measurementPoints.length} ‡∏à‡∏∏‡∏î) - ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ History...`
      );
      this.selectedPointIndex = null;
      
      // ‚úÖ ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ history ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      setTimeout(() => {
        this.router.navigate(['/users/history']);
      }, 2000);
    }
  }
  
  
  // ‚úÖ ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà 2-3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
  private async waitForStableValues(): Promise<void> {
    return new Promise((resolve) => {
      const startTime = Date.now();
      const waitTime = 3000; // 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      
      this.isWaitingForStable = true;
      this.countdownSeconds = 3;
      
      console.log('‚è≥ Waiting for stable values...');
      
      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏±‡∏ö‡∏ñ‡∏≠‡∏¢‡∏´‡∏•‡∏±‡∏á
      const countdownInterval = setInterval(() => {
        const elapsed = Date.now() - startTime;
        const remaining = Math.max(0, waitTime - elapsed);
        const seconds = Math.ceil(remaining / 1000);
        
        this.countdownSeconds = seconds;
        
        if (seconds > 0) {
          console.log(`‚è≥ Waiting... ${seconds} seconds remaining`);
        }
      }, 1000);
      
      // ‚úÖ ‡∏£‡∏≠ 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      setTimeout(() => {
        clearInterval(countdownInterval);
        this.isWaitingForStable = false;
        this.countdownSeconds = 0;
        console.log('‚úÖ Values should be stable now');
        resolve();
      }, waitTime);
    });
  }
  
  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Firebase live ‡∏•‡∏á PostgreSQL
  private async saveCurrentLiveDataToPostgreSQL(token: string): Promise<void> {
    // ‚úÖ 1) guard ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
    if (this.selectedPointIndex == null || this.selectedPointIndex < 0) {
      throw new Error('No point selected for measurement');
    }
    if (!this.currentAreaId) {
      throw new Error('No area ID available');
    }
    if (!this.measurementPoints || !this.measurementPoints[this.selectedPointIndex]) {
      throw new Error('No coordinates for selected point');
    }
    if (!this.liveData) {
      throw new Error('No live data available');
    }

    // ‚úÖ 2) ‡∏î‡∏∂‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (GeoJSON-like: [lng, lat])
    const [lngRaw, latRaw] = this.measurementPoints[this.selectedPointIndex];

    // ‚úÖ 3) ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå TEXT ‡πÉ‡∏ô Postgres
    const lat = this.limitPrecision(Number(latRaw), 8);
    const lng = this.limitPrecision(Number(lngRaw), 8);
    const latText = String(lat);
    const lngText = String(lng);

    // ‚úÖ 4) ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    const measurementData = {
      deviceid: parseInt(this.deviceId || '0', 10),
      areaid: parseInt(String(this.currentAreaId), 10),   // FK -> areas.areasid
      point_id: this.selectedPointIndex + 1,              // 1-based index
      lat: latText,                                       // TEXT
      lng: lngText,                                       // TEXT
      temperature: this.limitPrecision(this.liveData?.temperature ?? 0, 2),
      moisture: this.limitPrecision(this.liveData?.moisture ?? 0, 2),
      nitrogen:  this.limitPrecision(this.liveData?.nitrogen ?? 0, 2),
      phosphorus:this.limitPrecision(this.liveData?.phosphorus ?? 0, 2),
      potassium: this.limitPrecision(this.liveData?.potassium ?? 0, 2),
      ph:        this.limitPrecision(this.liveData?.ph ?? 7.0, 2),
      measured_at: new Date().toISOString(),              // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏≤‡∏á ‡πÜ ‡πÉ‡∏´‡πâ backend map ‡πÄ‡∏õ‡πá‡∏ô measurement_date/time
    };

    console.log('üìä Measurement data to save:', measurementData);
    console.log('üîó API URL:', `${this.apiUrl}/api/firebase-measurements/save-current-live`);
    console.log('üîë Token:', token ? 'Present' : 'Missing');

    // ‚úÖ 5) ‡∏™‡πà‡∏á‡πÄ‡∏Ç‡πâ‡∏≤ API
    const response = await lastValueFrom(
      this.http.post(`${this.apiUrl}/api/firebase-measurements/save-current-live`, measurementData, {
        headers: { 
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}` 
        }
      })
    );

    console.log('‚úÖ Live data saved to PostgreSQL:', response);

    // ‚úÖ 6) ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏ö‡∏ó‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î
    this.notificationService.showNotification(
      'success',
      '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      `‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å ESP32 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!
üìç ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà ${this.selectedPointIndex + 1} (Area: ${this.currentAreaId})
üåç ‡∏û‡∏¥‡∏Å‡∏±‡∏î: ${lat.toFixed(6)}, ${lng.toFixed(6)}
üå°Ô∏è Temp: ${measurementData.temperature}¬∞C | üíß Moist: ${measurementData.moisture}%
üß™ pH: ${measurementData.ph}
üìä N:${measurementData.nitrogen} P:${measurementData.phosphorus} K:${measurementData.potassium}`
    );

    console.log('üìä Measurement data saved:', measurementData);
  }
  
  // ‚úÖ ‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà PostgreSQL (‡∏£‡∏≠‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Firebase/ESP32)
  async measureAllPoints(token: string) {
    let successCount = 0;
    let errorCount = 0;
    // ‡πÅ‡∏™‡∏î‡∏á loading state
    this.isLoading = true;
    
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    this.notificationService.showNotification(
      'info', 
      'üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î', 
      `‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏±‡∏î ${this.measurementPoints.length} ‡∏à‡∏∏‡∏î\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà...`
    );
    
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö currentAreaId
      console.log('üîç Current areaId before measurement:', this.currentAreaId);
      if (!this.currentAreaId) {
        console.error('‚ùå No currentAreaId available for measurement');
        this.notificationService.showNotification('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÑ‡∏°‡πà‡∏û‡∏ö Area ID ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà');
        return;
      }
      
      // ‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏à‡∏∏‡∏î
      for (let i = 0; i < this.measurementPoints.length; i++) {
        const [targetLng, targetLat] = this.measurementPoints[i];
        
        console.log(`üìç Target point ${i + 1}:`, { targetLat, targetLng });
        
        // ‚úÖ ‡∏£‡∏≠‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å Firebase/ESP32
        this.notificationService.showNotification(
          'info', 
          '‚è≥ ‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ESP32...', 
          `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà ${i + 1}/${this.measurementPoints.length}\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠ ESP32 ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î...`
        );
        
        // ‡∏£‡∏≠‡πÉ‡∏´‡πâ ESP32 ‡∏ß‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤ (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ finished = true)
        const measurementFromESP32 = await this.waitForESP32Measurement(i + 1);
        
        if (!measurementFromESP32) {
          console.error(`‚ùå Timeout waiting for ESP32 measurement at point ${i + 1}`);
          errorCount++;
          
          this.notificationService.showNotification(
            'error',
            '‚è±Ô∏è ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠',
            `‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ESP32 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà ${i + 1}\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠`
          );
          
          continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏à‡∏∏‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        }
        
        console.log(`‚úÖ Received measurement from ESP32 for point ${i + 1}:`, measurementFromESP32);
        
        // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î GPS ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å ESP32 (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏à‡∏≤‡∏Å MapTiler)
        const gpsLat = measurementFromESP32.lat || measurementFromESP32.latitude || targetLat;
        const gpsLng = measurementFromESP32.lng || measurementFromESP32.longitude || targetLng;
        
        console.log(`üõ∞Ô∏è GPS from ESP32 for point ${i + 1}:`, {
          gpsLat,
          gpsLng,
          targetLat,
          targetLng,
          source: 'ESP32 GPS Module'
        });
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• measurement ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å ESP32
        const measurementData = {
          deviceId: this.deviceId,
          temperature: this.limitPrecision(measurementFromESP32.temperature || 0, 2),
          moisture: this.limitPrecision(measurementFromESP32.moisture || 0, 2),
          nitrogen: this.limitPrecision(measurementFromESP32.nitrogen || 0, 2),
          phosphorus: this.limitPrecision(measurementFromESP32.phosphorus || 0, 2),
          potassium: this.limitPrecision(measurementFromESP32.potassium || 0, 2),
          ph: this.limitPrecision(measurementFromESP32.ph || 7.0, 2),
          lat: this.limitPrecision(gpsLat, 8), // ‚úÖ ‡πÉ‡∏ä‡πâ GPS ‡∏à‡∏≤‡∏Å ESP32 (precision 8)
          lng: this.limitPrecision(gpsLng, 8), // ‚úÖ ‡πÉ‡∏ä‡πâ GPS ‡∏à‡∏≤‡∏Å ESP32 (precision 8)
          measurementPoint: i + 1,
          areaId: this.currentAreaId
        };
        
        console.log(`üìä Measurement data for point ${i + 1}:`, measurementData);
        
        try {
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å measurement ‡πÑ‡∏õ‡∏¢‡∏±‡∏á PostgreSQL
          const response = await lastValueFrom(
            this.http.post(`${this.apiUrl}/api/measurements`, measurementData, {
              headers: {
                'Authorization': `Bearer ${token}`
              }
            })
          );
          successCount++;
          
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
          this.measurementCount++;
          
          // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏î‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à
          const remainingCount = this.measurementPoints.length - (i + 1);
          const progressPercentage = Math.round(((i + 1) / this.measurementPoints.length) * 100);
          
          this.notificationService.showNotification(
            'success', 
            '‚úÖ ‡∏ß‡∏±‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!', 
            `‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà ${i + 1} ‡∏ß‡∏±‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß\n\nüìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤: ${progressPercentage}%\n‚úÖ ‡∏ß‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß: ${i + 1}/${this.measurementPoints.length} ‡∏à‡∏∏‡∏î\n‚è≥ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å: ${remainingCount} ‡∏à‡∏∏‡∏î`
          );
          
          // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
          this.markPointAsMeasured(i);
          
          // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á ESP32 ‡∏ö‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
          this.addESP32MarkerToMap(gpsLat, gpsLng, i + 1, measurementFromESP32);
          
        } catch (pointError: any) {
          console.error(`‚ùå Error measuring point ${i + 1}:`, pointError);
          errorCount++;
          
          // ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
          this.notificationService.showNotification(
            'error', 
            '‚ùå ‡∏ß‡∏±‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 
            `‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà ${i + 1} ‡∏ß‡∏±‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n${pointError.error?.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å'}`
          );
        }
        
        // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏à‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
        if (i < this.measurementPoints.length - 1) {
          await new Promise(resolve => setTimeout(resolve, 1000));
        }
      }
      
      // ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
      if (successCount > 0) {
        this.notificationService.showNotification(
          'success', 
          'üéâ ‡∏ß‡∏±‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!', 
          `‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!\n\n‚úÖ ‡∏ß‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successCount} ‡∏à‡∏∏‡∏î\n${errorCount > 0 ? `‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${errorCount} ‡∏à‡∏∏‡∏î\n` : ''}üìä ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${Math.round((successCount / this.measurementPoints.length) * 100)}%\n\n‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ History...`
        );
        
        // ‡πÄ‡∏î‡πâ‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ history ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        setTimeout(() => {
          this.router.navigate(['/users/history']);
        }, 3000);
      } else {
        this.notificationService.showNotification('error', '‡∏ß‡∏±‡∏î‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏±‡∏î‡∏à‡∏∏‡∏î‡πÉ‡∏î‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
      }
    } catch (error: any) {
      console.error('‚ùå Error in measureAllPoints:', error);
      this.notificationService.showNotification('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
    } finally {
      this.isLoading = false;
    }
  }
  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å measurement ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  async saveSingleMeasurement(token: string, newMeasurement: Measurement) {
    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á areasid ‡πÄ‡∏õ‡πá‡∏ô areaId ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
    const measurementData = {
      ...newMeasurement,
      areaId: newMeasurement.areasid, // ‚úÖ ‡πÉ‡∏ä‡πâ areaId ‡πÅ‡∏ó‡∏ô areasid
      areasid: undefined // ‚úÖ ‡∏•‡∏ö areasid ‡∏≠‡∏≠‡∏Å
    };
    
    const response = await lastValueFrom(
      this.http.post(`${this.apiUrl}/api/measurements`, measurementData, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
    );
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
    this.measurements.push(newMeasurement);
    this.measurementCount++;
    await this.updateAreaStatistics();
    await this.initializeMap();
    this.notificationService.showNotification('success', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß');
  }
  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á area ‡∏û‡∏£‡πâ‡∏≠‡∏° measurements
  async saveAreaMeasurement(token: string) {
    const areaData = {
      area_name: this.locationDetail || `‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î ${new Date().toLocaleDateString('th-TH')}`,
      deviceId: this.deviceId, // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° deviceId
      measurements: this.selectedPoints.map((point, index) => ({
        lat: this.roundLatLng(point[1], 6),
        lng: this.roundLatLng(point[0], 6),
        temperature: this.limitPrecision(this.liveData?.temperature || 0, 2),
        moisture: this.limitPrecision(this.liveData?.moisture || 0, 2),
        nitrogen: this.limitPrecision(this.liveData?.nitrogen || 0, 2),
        phosphorus: this.limitPrecision(this.liveData?.phosphorus || 0, 2),
        potassium: this.limitPrecision(this.liveData?.potassium || 0, 2),
        ph: this.limitPrecision(this.liveData?.ph || 7.0, 2)
      }))
    };
    const response = await lastValueFrom(
      this.http.post(`${this.apiUrl}/api/measurements/create-area`, areaData, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      })
    );
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
    this.measurementCount += this.selectedPoints.length;
    await this.initializeMap();
    this.notificationService.showNotification(
      'success', 
      '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 
      `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà "${areaData.area_name}" ‡∏û‡∏£‡πâ‡∏≠‡∏° ${this.selectedPoints.length} ‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß`
    );
  }
  async createArea() {
    if (!this.areaName) {
      this.notificationService.showNotification('error', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà');
      return;
    }
    const newArea: Area = {
      id: Date.now().toString(),
      name: this.areaName,
      deviceId: this.deviceId || '',
      username: '', // ‡∏•‡∏ö username ‡∏≠‡∏≠‡∏Å - ‡πÉ‡∏´‡πâ AuthInterceptor ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Firebase ID token
      polygonBounds: this.getPolygonBounds() || [],
      createdDate: new Date().toISOString(),
      createdTimestamp: Date.now(),
      totalMeasurements: 0,
    };
    try {
      await lastValueFrom(this.http.post(`${this.apiUrl}/api/areas`, newArea));
      this.currentAreaId = newArea.id;
      this.currentArea = newArea;
      this.areaName = '';
      await this.initializeMap();
    } catch (error) {
      console.error('Error creating area:', error);
      this.notificationService.showNotification('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà');
    }
  }
  private getPolygonBounds(): [number, number][] {
    // ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å map interaction (‡∏™‡∏°‡∏°‡∏ï‡∏¥‡πÉ‡∏ä‡πâ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏≤‡∏Å‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ)
    return this.measurements.length > 0
      ? this.measurements.map((m) => [m.lng, m.lat] as [number, number])
      : [];
  }
  async updateAreaStatistics() {
    if (!this.currentAreaId || this.measurements.length === 0) return;
    try {
      const totals = this.measurements.reduce(
        (acc, m) => ({
          temperature: acc.temperature + (m.temperature || 0),
          moisture: acc.moisture + (m.moisture || 0),
          nitrogen: acc.nitrogen + (m.nitrogen || 0),
          phosphorus: acc.phosphorus + (m.phosphorus || 0),
          potassium: acc.potassium + (m.potassium || 0),
          ph: acc.ph + (m.ph || 0),
        }),
        {
          temperature: 0,
          moisture: 0,
          nitrogen: 0,
          phosphorus: 0,
          potassium: 0,
          ph: 0,
        }
      );
      const count = this.measurements.length;
      const averages = {
        temperature: parseFloat((totals.temperature / count).toFixed(2)),
        moisture: parseFloat((totals.moisture / count).toFixed(2)),
        nitrogen: parseFloat((totals.nitrogen / count).toFixed(2)),
        phosphorus: parseFloat((totals.phosphorus / count).toFixed(2)),
        potassium: parseFloat((totals.potassium / count).toFixed(2)),
        ph: parseFloat((totals.ph / count).toFixed(2)),
      };
      await lastValueFrom(
        this.http.put(`${this.apiUrl}/api/areas/${this.currentAreaId}`, {
          totalMeasurements: count,
          averages,
          lastUpdated: Date.now(),
        })
      );
      if (this.currentArea) {
        this.currentArea.totalMeasurements = count;
        this.currentArea.averages = averages;
      }
    } catch (error) {
      console.error('Error updating area statistics:', error);
    }
  }
  showAreaStatistics() {
    if (!this.currentArea || !this.currentArea.averages) {
      this.notificationService.showNotification('info', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥', '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πâ');
      return;
    }
    const s = this.currentArea.averages;
    const statsMessage = `‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: ${this.currentArea.name}
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î: ${this.currentArea.totalMeasurements} ‡∏à‡∏∏‡∏î
‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢:
‚Ä¢ ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${s.temperature}¬∞C
‚Ä¢ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${s.moisture}%
‚Ä¢ ‡πÑ‡∏ô‡πÇ‡∏ï‡∏£‡πÄ‡∏à‡∏ô: ${s.nitrogen} mg/kg
‚Ä¢ ‡∏ü‡∏≠‡∏™‡∏ü‡∏≠‡∏£‡∏±‡∏™: ${s.phosphorus} mg/kg
‚Ä¢ ‡πÇ‡∏û‡πÅ‡∏ó‡∏™‡πÄ‡∏ã‡∏µ‡∏¢‡∏°: ${s.potassium} mg/kg
‚Ä¢ ‡∏Ñ‡πà‡∏≤ pH: ${s.ph}`;
    this.notificationService.showNotification('info', '‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà', statsMessage);
  }
  async startNewArea() {
    if (this.measurementCount > 0) {
      const confirmReset = window.confirm(
        `‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î ${this.measurementCount} ‡∏à‡∏∏‡∏î‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà "${this.areaName}"\n‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`
      );
      if (!confirmReset) return;
    }
    await this.reopenPopup();
  }
  private async reopenPopup() {
    this.currentAreaId = null;
    this.currentArea = null;
    this.measurements = [];
    this.measurementCount = 0;
    this.areaName = '';
    this.customLocationName = '';
    await this.initializeMap();
  }
  closePopup() { 
    this.showPopup = false; 
    this.isSelectingArea = false;
    this.selectedPoints = [];
    this.measurementPoints = [];
    this.showMeasurementPoints = false;
    this.clearMarks();
  }
  stopPropagation(event: Event) { event.stopPropagation(); }
  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
  startAreaSelection() {
    this.isSelectingArea = true;
    this.selectedPoints = [];
    this.points = [];
    this.clearMarks();
    this.initializePopupMap();
  }
  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ popup ‡πÅ‡∏™‡∏î‡∏á
  onPopupShow() {
    setTimeout(() => {
      this.initializePopupMap();
    }, 100);
  }
  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï polygon
  updatePolygon() {
    if (!this.map || this.selectedPoints.length < 3) {
      // ‡∏•‡∏ö polygon ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 3 ‡∏à‡∏∏‡∏î
      if (this.map && this.currentPolygon) {
        this.map.removeLayer('polygon-layer');
        this.map.removeLayer('polygon-outline');
        this.map.removeSource('polygon-source');
        this.currentPolygon = null;
      }
      return;
    }
    // ‡∏•‡∏ö polygon ‡πÄ‡∏î‡∏¥‡∏°
    if (this.currentPolygon) {
      this.map.removeLayer('polygon-layer');
      this.map.removeLayer('polygon-outline');
      this.map.removeSource('polygon-source');
    }
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á polygon ‡πÉ‡∏´‡∏°‡πà
    this.map.addSource('polygon-source', {
      type: 'geojson',
      data: {
        type: 'Feature',
        properties: {},
        geometry: {
          type: 'Polygon',
          coordinates: [this.selectedPoints]
        }
      }
    });
    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° polygon fill (‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á)
    this.map.addLayer({
      id: 'polygon-layer',
      type: 'fill',
      source: 'polygon-source',
      paint: {
        'fill-color': '#00aaff',
        'fill-opacity': 0.2 // ‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÉ‡∏™‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏±‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
      }
    });
    // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° polygon outline (‡∏Å‡∏£‡∏≠‡∏ö)
    this.map.addLayer({
      id: 'polygon-outline',
      type: 'line',
      source: 'polygon-source',
      paint: {
        'line-color': '#00aaff',
        'line-width': 3, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ô‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏™‡πâ‡∏ô
        'line-dasharray': [2, 2] // ‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏£‡∏∞
      }
    });
    this.currentPolygon = true;
  }
  // ‚úÖ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏à‡∏∏‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  clearMarks() {
    this.selectedPoints = [];
    this.points = [];
    if (this.map) {
      // ‡∏•‡∏ö markers
      const markers = document.querySelectorAll('.maplibregl-marker');
      markers.forEach(marker => marker.remove());
      // ‡∏•‡∏ö polygon
      if (this.currentPolygon) {
        this.map.removeLayer('polygon-layer');
        this.map.removeLayer('polygon-outline');
        this.map.removeSource('polygon-source');
        this.currentPolygon = null;
      }
    }
  }
  // ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
  async confirmArea() {
    if (this.selectedPoints.length < 3) {
      this.notificationService.showNotification('error', '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠', '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏à‡∏∏‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà');
      return;
    }
    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏±‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    this.generateMeasurementPoints();
    console.log('üéØ After generateMeasurementPoints:', {
      measurementPointsLength: this.measurementPoints.length,
      showMeasurementPoints: this.showMeasurementPoints
    });
    
    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô table areas ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    await this.createAreaImmediately();
    this.showPopup = false;
    this.isSelectingArea = false;
    this.showMeasurementPoints = true;
    
    console.log('üéØ After setting showMeasurementPoints:', {
      showMeasurementPoints: this.showMeasurementPoints,
      measurementPointsLength: this.measurementPoints.length
    });
    
    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î
    this.showMainMap = true;
    setTimeout(async () => {
      await this.initializeMap();
      // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
      await this.loadCompletedMeasurements();
      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏Ç‡∏≠‡∏á markers
      setTimeout(() => {
        this.updateMarkerColors();
      }, 500);
      console.log('üéØ Measurement points already created in initializeMap');
    }, 100);
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    const area = this.calculateSimpleArea(this.selectedPoints);
    const areaFormatted = this.formatAreaToThaiUnits(area);
    this.locationDetail = `‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: ${areaFormatted} (${this.selectedPoints.length} ‡∏à‡∏∏‡∏î) - ‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î: ${this.measurementPoints.length} ‡∏à‡∏∏‡∏î`;
    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
  }
  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô table areas ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
  async createAreaImmediately() {
    if (!this.currentUser || !this.deviceId) {
      console.error('‚ùå No current user or device ID for area creation');
      return;
    }
    
    try {
      // ‚úÖ Get fresh token from Firebase
      const token = await this.currentUser.getIdToken(true); // force refresh
      
      console.log('üîë Firebase token obtained:', {
        tokenLength: token?.length || 0,
        tokenStart: token?.substring(0, 20) + '...',
        userId: this.currentUser.uid,
        email: this.currentUser.email
      });
      
      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
      const area = this.calculateSimpleArea(this.selectedPoints);
      const areaFormatted = this.formatAreaToThaiUnits(area);
      
      console.log('üìç Creating area:', {
        area_name: `‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î ${new Date().toLocaleDateString('th-TH')} - ${areaFormatted}`,
        description: `‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ${areaFormatted} ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ ${this.userName} - Device: ${this.deviceId}`,
        apiUrl: this.apiUrl
      });
      
      // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á area ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ measurementId
      console.log('üöÄ Sending POST request to:', `${this.apiUrl}/api/areas`);
      console.log('üì¶ Request payload:', {
        area_name: `‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î ${new Date().toLocaleDateString('th-TH')} - ${areaFormatted}`,
        description: `‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ${areaFormatted} ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ ${this.userName} - Device: ${this.deviceId}`
      });
      console.log('üîê Request headers:', {
        'Authorization': `Bearer ${token.substring(0, 20)}...`,
        'Content-Type': 'application/json'
      });
      
      const response: any = await lastValueFrom(
        this.http.post(`${this.apiUrl}/api/areas`, {
          area_name: `‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î ${new Date().toLocaleDateString('th-TH')} - ${areaFormatted}`,
          description: `‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà ${areaFormatted} ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ ${this.userName} - Device: ${this.deviceId}`
        }, {
          headers: { 
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          }
        })
      );
      
      console.log('‚úÖ API response received:', response);
      
      // ‡πÄ‡∏Å‡πá‡∏ö area ID
      if (response && response.area && response.area.area_id) {
        this.currentAreaId = response.area.area_id;
        console.log('‚úÖ Area created with ID:', this.currentAreaId);
        
        this.notificationService.showNotification(
          'success', 
          '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 
          `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà "${response.area.area_name}" ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß\nArea ID: ${this.currentAreaId}\n‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î ${this.measurementPoints.length} ‡∏à‡∏∏‡∏î`
        );
      } else {
        console.error('‚ùå No area_id in response:', response);
        throw new Error('Invalid response from server');
      }
      
    } catch (error: any) {
      console.error('‚ùå Error creating area:', {
        status: error.status,
        statusText: error.statusText,
        message: error.message,
        error: error.error,
        url: error.url,
        fullError: error
      });
      
      // ‡πÅ‡∏™‡∏î‡∏á error message ‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á
      let errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ';
      let errorDetails = '';
      
      if (error.status === 401) {
        errorMessage = '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà';
        errorDetails = error.error?.message || 'Firebase token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏';
        console.error('üîê Authentication Error:', {
          message: error.error?.message,
          hint: 'Token ‡∏≠‡∏≤‡∏à‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏•‡∏≠‡∏á logout ‡πÅ‡∏•‡πâ‡∏ß login ‡πÉ‡∏´‡∏°‡πà'
        });
      } else if (error.status === 400) {
        errorMessage = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
        errorDetails = error.error?.message || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
      } else if (error.status === 500) {
        errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå';
        errorDetails = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö';
        console.error('üî• Server Error:', error.error);
      } else if (error.status === 404) {
        errorMessage = '‡πÑ‡∏°‡πà‡∏û‡∏ö endpoint';
        errorDetails = `/api/areas ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö`;
      } else if (error.status === 0) {
        errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå';
        errorDetails = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏¥‡∏ô‡πÄ‡∏ó‡∏≠‡∏£‡πå‡πÄ‡∏ô‡πá‡∏ï';
      } else if (error.message) {
        errorDetails = error.message;
      }
      
      console.error('üí° Error Details:', errorDetails);
      
      this.notificationService.showNotification(
        'error', 
        errorMessage, 
        errorDetails
      );
    }
  }
  // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏±‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
  generateMeasurementPoints() {
    console.log('üéØ generateMeasurementPoints called:', {
      selectedPointsLength: this.selectedPoints.length,
      selectedPoints: this.selectedPoints
    });
    
    if (this.selectedPoints.length < 3) {
      console.log('‚ùå Not enough points to generate measurement points');
      return;
    }
    
    this.measurementPoints = [];
    console.log('üîÑ Starting to generate measurement points...');
    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á polygon
    const bounds = this.calculateBounds(this.selectedPoints);
    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏°‡∏ï‡∏£)
    const areaSize = this.calculateAreaSize(bounds);
    const realArea = this.calculatePolygonArea(this.selectedPoints);
    // ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î‡∏ï‡∏≤‡∏°‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    let pointDistance: number;
    if (areaSize < 30) {
      // ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å (< 30m): ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á 5-10 ‡πÄ‡∏°‡∏ï‡∏£
      pointDistance = 7; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 7 ‡πÄ‡∏°‡∏ï‡∏£
    } else {
      // ‚úÖ ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà (‚â• 30m): ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á 10-15 ‡πÄ‡∏°‡∏ï‡∏£
      pointDistance = 12; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ 12 ‡πÄ‡∏°‡∏ï‡∏£
    }
    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏°‡∏ï‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏á‡∏®‡∏≤ (‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì)
    // 1 ‡∏≠‡∏á‡∏®‡∏≤ ‚âà 111,000 ‡πÄ‡∏°‡∏ï‡∏£
    const latStep = pointDistance / 111000;
    const lngStep = pointDistance / (111000 * Math.cos((bounds.minLat + bounds.maxLat) / 2 * Math.PI / 180));
    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î‡πÅ‡∏ö‡∏ö grid pattern ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å MapTiler
    const points: [number, number][] = [];
    for (let lng = bounds.minLng; lng <= bounds.maxLng; lng += lngStep) {
      for (let lat = bounds.minLat; lat <= bounds.maxLat; lat += latStep) {
        // ‚úÖ ‡∏î‡∏∂‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å MapTiler ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        const realLng = parseFloat(lng.toFixed(8)); // precision 8 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
        const realLat = parseFloat(lat.toFixed(8)); // precision 8 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
        
        const point: [number, number] = [realLng, realLat];
        // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô polygon ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (this.isPointInPolygon(point, this.selectedPoints)) {
          points.push(point);
          
          console.log('üó∫Ô∏è MapTiler measurement point generated:', {
            original_lng: lng,
            original_lat: lat,
            real_lng: realLng,
            real_lat: realLat,
            precision: '8 decimal places',
            accuracy: '~0.00111 mm'
          });
        }
      }
    }
    // ‚úÖ ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 50 ‡∏à‡∏∏‡∏î (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô)
    if (points.length > 50) {
      const step = Math.floor(points.length / 50);
      this.measurementPoints = points.filter((_, index) => index % step === 0).slice(0, 50);
    } else {
      this.measurementPoints = points;
    }
    
    console.log('‚úÖ Measurement points generated:', {
      totalPoints: points.length,
      finalPoints: this.measurementPoints.length,
      measurementPoints: this.measurementPoints
    });
  }
  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏≠‡∏ö‡πÄ‡∏Ç‡∏ï‡∏Ç‡∏≠‡∏á polygon
  calculateBounds(points: [number, number][]) {
    let minLng = points[0][0];
    let maxLng = points[0][0];
    let minLat = points[0][1];
    let maxLat = points[0][1];
    for (const [lng, lat] of points) {
      minLng = Math.min(minLng, lng);
      maxLng = Math.max(maxLng, lng);
      minLat = Math.min(minLat, lat);
      maxLat = Math.max(maxLat, lat);
    }
    return { minLng, maxLng, minLat, maxLat };
  }
  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà (‡πÄ‡∏°‡∏ï‡∏£)
  calculateAreaSize(bounds: { minLng: number, maxLng: number, minLat: number, maxLat: number }) {
    // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÉ‡∏ô‡πÅ‡∏ô‡∏ß lat ‡πÅ‡∏•‡∏∞ lng (‡πÄ‡∏°‡∏ï‡∏£)
    const latDistance = (bounds.maxLat - bounds.minLat) * 111000; // 1 ‡∏≠‡∏á‡∏®‡∏≤ ‚âà 111,000 ‡πÄ‡∏°‡∏ï‡∏£
    const lngDistance = (bounds.maxLng - bounds.minLng) * 111000 * Math.cos((bounds.minLat + bounds.maxLat) / 2 * Math.PI / 180);
    // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏ç‡πà‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà
    const areaSize = Math.max(latDistance, lngDistance);
    return areaSize;
  }
  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏à‡∏∏‡∏î‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô polygon ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  isPointInPolygon(point: [number, number], polygon: [number, number][]): boolean {
    const [x, y] = point;
    let inside = false;
    for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {
      const [xi, yi] = polygon[i];
      const [xj, yj] = polygon[j];
      if (((yi > y) !== (yj > y)) && (x < (xj - xi) * (y - yi) / (yj - yi) + xi)) {
        inside = !inside;
      }
    }
    return inside;
  }
  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà polygon ‡πÅ‡∏ö‡∏ö‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ (‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£)
  calculatePolygonArea(coordinates: [number, number][]): number {
    if (coordinates.length < 3) return 0;
    // ‡πÉ‡∏ä‡πâ Shoelace formula ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏¥‡∏Å‡∏±‡∏î
    let area = 0;
    const n = coordinates.length;
    for (let i = 0; i < n; i++) {
      const j = (i + 1) % n;
      area += coordinates[i][0] * coordinates[j][1];
      area -= coordinates[j][0] * coordinates[i][1];
    }
    area = Math.abs(area) / 2;
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å degrees ‡πÄ‡∏õ‡πá‡∏ô meters ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Haversine formula
    const earthRadius = 6371000; // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÇ‡∏•‡∏Å‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏°‡∏ï‡∏£
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏∏‡∏î
    let totalDistance = 0;
    for (let i = 0; i < n; i++) {
      const j = (i + 1) % n;
      const lat1 = coordinates[i][1] * Math.PI / 180;
      const lat2 = coordinates[j][1] * Math.PI / 180;
      const dLat = lat2 - lat1;
      const dLng = (coordinates[j][0] - coordinates[i][0]) * Math.PI / 180;
      const a = Math.sin(dLat/2) * Math.sin(dLat/2) +
                Math.cos(lat1) * Math.cos(lat2) *
                Math.sin(dLng/2) * Math.sin(dLng/2);
      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
      const distance = earthRadius * c;
      totalDistance += distance;
    }
    const avgDistance = totalDistance / n;
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£
    const realArea = area * (avgDistance * avgDistance);
    return realArea;
  }
  // ‚úÖ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥ (‡πÑ‡∏£‡πà)
  calculateSimpleArea(coordinates: [number, number][]): number {
    if (coordinates.length < 3) return 0;
    // ‡πÉ‡∏ä‡πâ Shoelace formula
    let area = 0;
    const n = coordinates.length;
    for (let i = 0; i < n; i++) {
      const j = (i + 1) % n;
      area += coordinates[i][0] * coordinates[j][1];
      area -= coordinates[j][0] * coordinates[i][1];
    }
    area = Math.abs(area) / 2;
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å degrees ‡πÄ‡∏õ‡πá‡∏ô meters ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
    // 1 ‡∏≠‡∏á‡∏®‡∏≤ ‚âà 111,000 ‡πÄ‡∏°‡∏ï‡∏£
    const latToMeters = 111000;
    const lngToMeters = 111000 * Math.cos(coordinates[0][1] * Math.PI / 180);
    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£
    const areaInSquareMeters = area * latToMeters * lngToMeters;
    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏£‡πà (1 ‡πÑ‡∏£‡πà = 1,600 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£)
    const areaInRai = areaInSquareMeters / 1600;
    return areaInRai;
  }
  // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "‡∏Å‡∏µ‡πà ‡πÑ‡∏£‡πà ‡∏Å‡∏µ‡πà ‡∏á‡∏≤‡∏ô ‡∏Å‡∏µ‡πà ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤ ‡∏Å‡∏µ‡πà ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£"
  formatAreaToThaiUnits(areaInRai: number): string {
    if (areaInRai < 0.0001) return '0 ‡πÑ‡∏£‡πà 0 ‡∏á‡∏≤‡∏ô 0 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤ 0 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£';
    // 1 ‡πÑ‡∏£‡πà = 4 ‡∏á‡∏≤‡∏ô = 1,600 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£
    // 1 ‡∏á‡∏≤‡∏ô = 400 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£
    // 1 ‡∏á‡∏≤‡∏ô = 100 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤
    // 1 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤ = 4 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£
    const rai = Math.floor(areaInRai);
    const remainingArea = (areaInRai - rai) * 1600; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£
    const ngan = Math.floor(remainingArea / 400);
    const remainingAfterNgan = remainingArea % 400;
    const squareWa = Math.floor(remainingAfterNgan / 4);
    const squareMeters = Math.round(remainingAfterNgan % 4);
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö: ‡πÑ‡∏£‡πà ‚Üí ‡∏á‡∏≤‡∏ô ‚Üí ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤ ‚Üí ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£
    let result = '';
    if (rai > 0) {
      result += `${rai} ‡πÑ‡∏£‡πà`;
    }
    if (ngan > 0) {
      if (result) result += ' ';
      result += `${ngan} ‡∏á‡∏≤‡∏ô`;
    }
    if (squareWa > 0) {
      if (result) result += ' ';
      result += `${squareWa} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤`;
    }
    if (squareMeters > 0) {
      if (result) result += ' ';
      result += `${squareMeters} ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£`;
    }
    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏•‡∏¢ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á 0 ‡πÑ‡∏£‡πà 0 ‡∏á‡∏≤‡∏ô 0 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤ 0 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£
    if (!result) {
      result = '0 ‡πÑ‡∏£‡πà 0 ‡∏á‡∏≤‡∏ô 0 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ß‡∏≤ 0 ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏°‡∏ï‡∏£';
    }
    return result;
  }
  // ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô popup
  initializePopupMap() {
    setTimeout(() => {
      const popupMapContainer = document.querySelector('.map-popup');
      if (!popupMapContainer) {
        console.error('‚ùå Map container not found');
        return;
      }
      // ‡∏•‡∏ö‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏°
      if (this.map) {
        this.map.remove();
        this.map = undefined;
      }
      try {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà - ‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°
        this.map = new Map({
          container: popupMapContainer as HTMLElement,
          style: `https://api.maptiler.com/maps/satellite/style.json?key=${environment.mapTilerApiKey}`, // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏î‡∏≤‡∏ß‡πÄ‡∏ó‡∏µ‡∏¢‡∏°
          center: [103.2501379, 16.2464504], // ‚úÖ ‡∏Ñ‡∏ì‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏® ‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°
          zoom: 17, // ‚úÖ ‡∏Ç‡∏¢‡∏≤‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ì‡∏∞
          pitch: 0,
          bearing: 0
        });
        // ‡πÄ‡∏û‡∏¥‡πà‡∏° event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏•‡∏¥‡∏Å
        this.map.on('click', (e) => {
          const { lng, lat } = e.lngLat;
          
          // ‚úÖ ‡∏î‡∏∂‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å MapTiler ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
          const realLng = parseFloat(lng.toFixed(8)); // precision 8 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
          const realLat = parseFloat(lat.toFixed(8)); // precision 8 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
          
          console.log('üó∫Ô∏è MapTiler coordinates:', {
            original_lng: lng,
            original_lat: lat,
            real_lng: realLng,
            real_lat: realLat,
            precision: '8 decimal places'
          });
          
          // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏•‡∏á‡πÉ‡∏ô selectedPoints ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á
          this.selectedPoints.push([realLng, realLat]);
          
          // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
          this.points = this.selectedPoints.map((point, index) => ({
            id: index + 1,
            lng: point[0],
            lat: point[1]
          }));
          
          // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° marker ‡∏î‡πâ‡∏ß‡∏¢‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á
          const marker = new Marker({ 
            color: '#00aaff',
            scale: 1.2
          })
            .setLngLat([realLng, realLat])
            .addTo(this.map!);
            
          // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô popup
          marker.setPopup(new Popup({
            offset: 25,
            closeButton: true,
            closeOnClick: false
          }).setHTML(`
            <div style="min-width: 200px; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">
              <div style="background: linear-gradient(135deg, #00aaff 0%, #0088cc 100%); color: white; padding: 10px; border-radius: 8px 8px 0 0; margin: -10px -10px 10px -10px; text-align: center;">
                <h4 style="margin: 0; font-size: 16px; font-weight: bold;">üìç ‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà ${this.selectedPoints.length}</h4>
              </div>
              <div style="padding: 10px; background: #f8f9fa; border-radius: 0 0 8px 8px; margin: -10px -10px -10px -10px;">
                <p style="margin: 0; font-size: 12px; color: #666;"><strong>üåç ‡∏û‡∏¥‡∏Å‡∏±‡∏î‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å MapTiler:</strong></p>
                <p style="margin: 4px 0 0 0; font-size: 14px; color: #2c3e50; font-weight: bold;">
                  Lat: ${realLat.toFixed(8)}<br>
                  Lng: ${realLng.toFixed(8)}
                </p>
                <p style="margin: 8px 0 0 0; font-size: 11px; color: #7f8c8d;">
                  ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥: 8 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏° (~0.00111 mm)
                </p>
              </div>
            </div>
          `));
          
          // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï polygon
          this.updatePolygon();
        });
        this.map.once('load', () => {
        });
        this.map.on('error', (e) => {
          console.error('‚ùå Map error:', e);
        });
      } catch (error) {
        console.error('‚ùå Error creating map:', error);
        this.notificationService.showNotification('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key');
      }
    }, 500); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏´‡πâ DOM ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
  }
  goBack() {
    this.location.back();
  }
  goToProfile() {
    this.router.navigate(['/profile']);
  }
  goToContactAdmin() {
    this.router.navigate(['/reports']);
  }
  goToHistory() {
    this.router.navigate(['/history']);
  }
  // ‚úÖ Methods ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô
  toggleUserInfo() {
    this.showUserInfo = !this.showUserInfo;
  }
  toggleDeviceInfo() {
    this.showDeviceInfo = !this.showDeviceInfo;
  }
  toggleMainMap() {
    this.showMainMap = !this.showMainMap;
    // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á
    if (this.showMainMap) {
      setTimeout(async () => {
        await this.initializeMap();
      }, 100);
    }
  }
  toggleCardMenu() {
    this.showCardMenu = !this.showCardMenu;
    console.log('üìã Card menu visibility:', this.showCardMenu);
  }
  closeCardMenu() {
    this.showCardMenu = false;
  }
  
  // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
  formatTimestamp(timestamp: number): string {
    if (!timestamp) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    
    try {
      // ‡∏ñ‡πâ‡∏≤ timestamp ‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (10 ‡∏´‡∏•‡∏±‡∏Å) ‡πÉ‡∏´‡πâ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      const date = timestamp.toString().length === 10 
        ? new Date(timestamp * 1000) 
        : new Date(timestamp);
      
      return date.toLocaleString('th-TH', {
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit'
      });
    } catch (error) {
      console.error('‚ùå Error formatting timestamp:', error);
      return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
    }
  }
  
  // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏° IP address
  private async getUserLocationByIP(): Promise<[number, number] | null> {
    try {
      console.log('üåç Getting user location by IP...');
      
      // ‡πÉ‡∏ä‡πâ IP geolocation service
      const response = await fetch('https://ipapi.co/json/');
      const data = await response.json();
      
      if (data.latitude && data.longitude) {
        console.log('üìç User location found:', {
          country: data.country_name,
          city: data.city,
          coordinates: [data.longitude, data.latitude]
        });
        
        return [data.longitude, data.latitude];
      } else {
        console.log('‚ö†Ô∏è No location data from IP service');
        return null;
      }
    } catch (error) {
      console.error('‚ùå Error getting location by IP:', error);
      
      // Fallback: ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ service ‡∏≠‡∏∑‡πà‡∏ô
      try {
        console.log('üîÑ Trying fallback IP service...');
        const fallbackResponse = await fetch('https://ipinfo.io/json');
        const fallbackData = await fallbackResponse.json();
        
        if (fallbackData.loc) {
          const [lat, lng] = fallbackData.loc.split(',').map(Number);
          console.log('üìç Fallback location found:', {
            country: fallbackData.country,
            city: fallbackData.city,
            coordinates: [lng, lat]
          });
          
          return [lng, lat];
        }
      } catch (fallbackError) {
        console.error('‚ùå Fallback IP service also failed:', fallbackError);
      }
      
      return null;
    }
  }
  
  // ========= üîª ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ò‡∏≠‡∏î‡∏ô‡∏µ‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ TS2339 ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà üîª =========
  private async initializeMap(): Promise<void> {
    if (!this.mapContainer?.nativeElement) return;
    // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    if (this.map) {
      this.map.remove();
      this.map = undefined;
    }
    
    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏° IP address
    const userLocation = await this.getUserLocationByIP();
    
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà - ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏° IP ‡∏´‡∏£‡∏∑‡∏≠ fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°
    this.map = new Map({
      container: this.mapContainer.nativeElement,
      style: `https://api.maptiler.com/maps/satellite/style.json?key=${environment.mapTilerApiKey}`, // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏î‡∏≤‡∏ß‡πÄ‡∏ó‡∏µ‡∏¢‡∏°
      center: userLocation || [103.2501379, 16.2464504], // ‚úÖ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏≤‡∏° IP ‡∏´‡∏£‡∏∑‡∏≠ fallback
      zoom: userLocation ? 15 : 17, // ‚úÖ zoom ‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
    });
    const bounds = new LngLatBounds();
    let hasPoint = false;
    // ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∏‡∏î‡∏ß‡∏±‡∏î‡πÄ‡∏î‡∏¥‡∏°
    for (const m of this.measurements) {
      if (typeof m.lng === 'number' && typeof m.lat === 'number') {
        new Marker({ color: '#ff6b6b' }).setLngLat([m.lng, m.lat]).addTo(this.map!);
        bounds.extend([m.lng, m.lat]);
        hasPoint = true;
      }
    }
    // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏±‡∏î (‡∏à‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
    if (this.showMeasurementPoints && this.measurementPoints.length > 0) {
      console.log('üéØ Showing measurement points:', this.measurementPoints.length);
      console.log('‚úÖ Measured points:', this.measuredPoints);
      
      // ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await this.loadCompletedMeasurements();
      
      // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ - ‡∏™‡∏£‡πâ‡∏≤‡∏á Marker ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏à‡∏∏‡∏î
      for (let i = 0; i < this.measurementPoints.length; i++) {
        const [lng, lat] = this.measurementPoints[i];
        const isMeasured = this.measuredPoints.includes(i);
        const isSelected = this.selectedPointIndex === i;
        const isMeasuring = this.currentMeasuringPoint === i;
        
        // ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        let color = '#6c757d'; // ‡πÄ‡∏ó‡∏≤ - ‡∏õ‡∏Å‡∏ï‡∏¥
        if (isSelected) {
          color = '#dc3545'; // ‡πÅ‡∏î‡∏á - ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà
        } else if (isMeasured) {
          color = '#28a745'; // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß - ‡∏ß‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß
        }
        
        // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á marker ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
        const marker = new Marker({ 
          color: color
        }).setLngLat([lng, lat]).addTo(this.map!);
        
        // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ marker ‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ
        marker.getElement().style.cursor = 'pointer';
        marker.getElement().style.pointerEvents = 'auto';
        
        // ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ SVG ‡πÉ‡∏´‡πâ‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ
        const svg = marker.getElement().querySelector('svg');
        if (svg) {
          svg.style.pointerEvents = 'auto';
          svg.style.cursor = 'pointer';
        }
        
        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° click event ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏∏‡∏î‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ
        marker.getElement().addEventListener('click', (e) => {
          e.stopPropagation(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ propagate
          console.log(`üìç Point ${i + 1} clicked`);
          this.selectedPointIndex = i;
          console.log(`üìç Selected point ${i + 1}:`, this.measurementPoints[i]);
          
          // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏Ç‡∏≠‡∏á marker ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          setTimeout(() => {
            this.updateMarkerColors();
          }, 100);
        });
        
        // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° hover effect ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡∏Ñ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ
        marker.getElement().addEventListener('mouseenter', () => {
          marker.getElement().style.cursor = 'pointer';
          marker.getElement().style.opacity = '0.8';
        });
        
        marker.getElement().addEventListener('mouseleave', () => {
          marker.getElement().style.cursor = 'default';
          marker.getElement().style.opacity = '1';
        });
        
        bounds.extend([lng, lat]);
        hasPoint = true;
      }
      
      console.log('‚úÖ Measurement points markers created successfully');
      
      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏µ‡∏Ç‡∏≠‡∏á markers ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à
      setTimeout(() => {
        this.updateMarkerColors();
      }, 500);
    }
    this.map.once('load', () => {
      console.log('üó∫Ô∏è Map loaded successfully');
      
      if (hasPoint) {
        this.map!.fitBounds(bounds, { padding: 40, maxZoom: 17, duration: 0 });
      }
    });
  }
  // ========= üî∫ ‡∏à‡∏ö initializeMap üî∫ =========
}
